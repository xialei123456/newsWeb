{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/*!\n  * pinia v2.0.0-rc.10\n  * (c) 2021 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, toRaw, watch, unref, markRaw, effectScope, ref, isVue2, isRef, isReactive, set, onUnmounted, reactive, toRef, del, computed, toRefs } from 'vue-demi';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\r\n * setActivePinia must be called to handle SSR at the top of functions like\r\n * `fetch`, `setup`, `serverPrefetch` and others\r\n */\nlet activePinia;\n/**\r\n * Sets or unsets the active pinia. Used in SSR and internally when calling\r\n * actions and getters\r\n *\r\n * @param pinia - Pinia instance\r\n */\nconst setActivePinia = pinia => activePinia = pinia;\n/**\r\n * Get the currently active pinia if there is any.\r\n */\nconst getActivePinia = () => getCurrentInstance() && inject(piniaSymbol) || activePinia;\nconst piniaSymbol = process.env.NODE_ENV !== 'production' ? Symbol('pinia') : /* istanbul ignore next */Symbol();\nfunction isPlainObject(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no) {\n  return o && typeof o === 'object' && Object.prototype.toString.call(o) === '[object Object]' && typeof o.toJSON !== 'function';\n}\n// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }\n// TODO: can we change these to numbers?\n/**\r\n * Possible types for SubscriptionCallback\r\n */\nvar MutationType;\n(function (MutationType) {\n  /**\r\n   * Direct mutation of the state:\r\n   *\r\n   * - `store.name = 'new name'`\r\n   * - `store.$state.name = 'new name'`\r\n   * - `store.list.push('new item')`\r\n   */\n  MutationType[\"direct\"] = \"direct\";\n  /**\r\n   * Mutated the state with `$patch` and an object\r\n   *\r\n   * - `store.$patch({ name: 'newName' })`\r\n   */\n  MutationType[\"patchObject\"] = \"patch object\";\n  /**\r\n   * Mutated the state with `$patch` and a function\r\n   *\r\n   * - `store.$patch(state => state.name = 'newName')`\r\n   */\n  MutationType[\"patchFunction\"] = \"patch function\";\n  // maybe reset? for $state = {} and $reset\n})(MutationType || (MutationType = {}));\nconst IS_CLIENT = typeof window !== 'undefined';\n\n/*\r\n * FileSaver.js A saveAs() FileSaver implementation.\r\n *\r\n * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin\r\n * Morote.\r\n *\r\n * License : MIT\r\n */\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nconst _global = /*#__PURE__*/(() => typeof window === 'object' && window.window === window ? window : typeof self === 'object' && self.self === self ? self : typeof global === 'object' && global.global === global ? global : typeof globalThis === 'object' ? globalThis : {\n  HTMLElement: null\n})();\nfunction bom(blob, {\n  autoBom = false\n} = {}) {\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xfeff), blob], {\n      type: blob.type\n    });\n  }\n  return blob;\n}\nfunction download(url, name, opts) {\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', url);\n  xhr.responseType = 'blob';\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts);\n  };\n  xhr.onerror = function () {\n    console.error('could not download file');\n  };\n  xhr.send();\n}\nfunction corsEnabled(url) {\n  const xhr = new XMLHttpRequest();\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false);\n  try {\n    xhr.send();\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299;\n}\n// `a.click()` doesn't work for all browsers (#465)\nfunction click(node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'));\n  } catch (e) {\n    const evt = document.createEvent('MouseEvents');\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\n    node.dispatchEvent(evt);\n  }\n}\nconst _navigator = typeof navigator === 'object' ? navigator : {\n  userAgent: ''\n};\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nconst isMacOSWebView = /*#__PURE__*/(() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();\nconst saveAs = !IS_CLIENT ? () => {} // noop\n:\n// Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n'download' in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs :\n// Use msSaveOrOpenBlob as a second approach\n'msSaveOrOpenBlob' in _navigator ? msSaveAs :\n// Fallback to using FileReader and a popup\nfileSaverSaveAs;\nfunction downloadSaveAs(blob, name = 'download', opts) {\n  const a = document.createElement('a');\n  a.download = name;\n  a.rel = 'noopener'; // tabnabbing\n  // TODO: detect chrome extensions & packaged apps\n  // a.target = '_blank'\n  if (typeof blob === 'string') {\n    // Support regular links\n    a.href = blob;\n    if (a.origin !== location.origin) {\n      if (corsEnabled(a.href)) {\n        download(blob, name, opts);\n      } else {\n        a.target = '_blank';\n        click(a);\n      }\n    } else {\n      click(a);\n    }\n  } else {\n    // Support blobs\n    a.href = URL.createObjectURL(blob);\n    setTimeout(function () {\n      URL.revokeObjectURL(a.href);\n    }, 4e4); // 40s\n    setTimeout(function () {\n      click(a);\n    }, 0);\n  }\n}\nfunction msSaveAs(blob, name = 'download', opts) {\n  if (typeof blob === 'string') {\n    if (corsEnabled(blob)) {\n      download(blob, name, opts);\n    } else {\n      const a = document.createElement('a');\n      a.href = blob;\n      a.target = '_blank';\n      setTimeout(function () {\n        click(a);\n      });\n    }\n  } else {\n    // @ts-ignore: works on windows\n    navigator.msSaveOrOpenBlob(bom(blob, opts), name);\n  }\n}\nfunction fileSaverSaveAs(blob, name, opts, popup) {\n  // Open a popup immediately do go around popup blocker\n  // Mostly only available on user interaction and the fileReader is async so...\n  popup = popup || open('', '_blank');\n  if (popup) {\n    popup.document.title = popup.document.body.innerText = 'downloading...';\n  }\n  if (typeof blob === 'string') return download(blob, name, opts);\n  const force = blob.type === 'application/octet-stream';\n  const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;\n  const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n  if ((isChromeIOS || force && isSafari || isMacOSWebView) && typeof FileReader !== 'undefined') {\n    // Safari doesn't allow downloading of blob URLs\n    const reader = new FileReader();\n    reader.onloadend = function () {\n      let url = reader.result;\n      if (typeof url !== 'string') {\n        popup = null;\n        throw new Error('Wrong reader.result type');\n      }\n      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\n      if (popup) {\n        popup.location.href = url;\n      } else {\n        location.assign(url);\n      }\n      popup = null; // reverse-tabnabbing #460\n    };\n    reader.readAsDataURL(blob);\n  } else {\n    const url = URL.createObjectURL(blob);\n    if (popup) popup.location.assign(url);else location.href = url;\n    popup = null; // reverse-tabnabbing #460\n    setTimeout(function () {\n      URL.revokeObjectURL(url);\n    }, 4e4); // 40s\n  }\n}\n\n/**\r\n * Shows a toast or console.log\r\n *\r\n * @param message - message to log\r\n * @param type - different color of the tooltip\r\n */\nfunction toastMessage(message, type) {\n  const piniaMessage = 'üçç ' + message;\n  if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {\n    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);\n  } else if (type === 'error') {\n    console.error(piniaMessage);\n  } else if (type === 'warn') {\n    console.warn(piniaMessage);\n  } else {\n    console.log(piniaMessage);\n  }\n}\nfunction isPinia(o) {\n  return '_a' in o && 'install' in o;\n}\nfunction checkClipboardAccess() {\n  if (!('clipboard' in navigator)) {\n    toastMessage(`Your browser doesn't support the Clipboard API`, 'error');\n    return true;\n  }\n}\nfunction checkNotFocusedError(error) {\n  if (error instanceof Error && error.message.toLowerCase().includes('document is not focused')) {\n    toastMessage('You need to activate the \"Emulate a focused page\" setting in the \"Rendering\" panel of devtools.', 'warn');\n    return true;\n  }\n  return false;\n}\nasync function actionGlobalCopyState(pinia) {\n  if (checkClipboardAccess()) return;\n  try {\n    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));\n    toastMessage('Global state copied to clipboard.');\n  } catch (error) {\n    if (checkNotFocusedError(error)) return;\n    toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nasync function actionGlobalPasteState(pinia) {\n  if (checkClipboardAccess()) return;\n  try {\n    pinia.state.value = JSON.parse(await navigator.clipboard.readText());\n    toastMessage('Global state pasted from clipboard.');\n  } catch (error) {\n    if (checkNotFocusedError(error)) return;\n    toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nasync function actionGlobalSaveState(pinia) {\n  try {\n    saveAs(new Blob([JSON.stringify(pinia.state.value)], {\n      type: 'text/plain;charset=utf-8'\n    }), 'pinia-state.json');\n  } catch (error) {\n    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nlet fileInput;\nfunction getFileOpener() {\n  if (!fileInput) {\n    fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.accept = '.json';\n  }\n  function openFile() {\n    return new Promise((resolve, reject) => {\n      fileInput.onchange = async () => {\n        const files = fileInput.files;\n        if (!files) return resolve(null);\n        const file = files.item(0);\n        if (!file) return resolve(null);\n        return resolve({\n          text: await file.text(),\n          file\n        });\n      };\n      // @ts-ignore: TODO: changed from 4.3 to 4.4\n      fileInput.oncancel = () => resolve(null);\n      fileInput.onerror = reject;\n      fileInput.click();\n    });\n  }\n  return openFile;\n}\nasync function actionGlobalOpenStateFile(pinia) {\n  try {\n    const open = await getFileOpener();\n    const result = await open();\n    if (!result) return;\n    const {\n      text,\n      file\n    } = result;\n    pinia.state.value = JSON.parse(text);\n    toastMessage(`Global state imported from \"${file.name}\".`);\n  } catch (error) {\n    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\n    console.error(error);\n  }\n}\nfunction formatDisplay(display) {\n  return {\n    _custom: {\n      display\n    }\n  };\n}\nconst PINIA_ROOT_LABEL = 'üçç Pinia (root)';\nconst PINIA_ROOT_ID = '_root';\nfunction formatStoreForInspectorTree(store) {\n  return '$id' in store ? {\n    id: store.$id,\n    label: store.$id\n  } : {\n    id: PINIA_ROOT_ID,\n    label: PINIA_ROOT_LABEL\n  };\n}\nfunction formatStoreForInspectorState(store) {\n  if (isPinia(store)) {\n    const state = {\n      state: Object.keys(store.state.value).map(storeId => ({\n        editable: true,\n        key: storeId,\n        value: store.state.value[storeId]\n      }))\n    };\n    // TODO: use this version when possible\n    // Object.keys(store.state.value).forEach((storeId) => {\n    //   const currentState = store.state.value[storeId]\n    //   state[storeId] = Object.keys(currentState).map((key) => ({\n    //     // is not possible to made editable because no way to get the storeId in\n    //     // edit inspector state callback\n    //     editable: false,\n    //     key,\n    //     value: currentState[key],\n    //   }))\n    // })\n    return state;\n  }\n  const state = {\n    state: Object.keys(store.$state).map(key => ({\n      editable: true,\n      key,\n      value: store.$state[key]\n    }))\n  };\n  // avoid adding empty getters\n  if (store._getters && store._getters.length) {\n    state.getters = store._getters.map(getterName => ({\n      editable: false,\n      key: getterName,\n      value: store[getterName]\n    }));\n  }\n  if (store._customProperties.size) {\n    state.customProperties = Array.from(store._customProperties).map(key => ({\n      editable: true,\n      key,\n      value: store[key]\n    }));\n  }\n  return state;\n}\nfunction formatEventData(events) {\n  if (!events) return {};\n  if (Array.isArray(events)) {\n    // TODO: handle add and delete for arrays and objects\n    return events.reduce((data, event) => {\n      data.keys.push(event.key);\n      data.operations.push(event.type);\n      data.oldValue[event.key] = event.oldValue;\n      data.newValue[event.key] = event.newValue;\n      return data;\n    }, {\n      oldValue: {},\n      keys: [],\n      operations: [],\n      newValue: {}\n    });\n  } else {\n    return {\n      operation: formatDisplay(events.type),\n      key: formatDisplay(events.key),\n      oldValue: events.oldValue,\n      newValue: events.newValue\n    };\n  }\n}\nfunction formatMutationType(type) {\n  switch (type) {\n    case MutationType.direct:\n      return 'mutation';\n    case MutationType.patchFunction:\n      return '$patch';\n    case MutationType.patchObject:\n      return '$patch';\n    default:\n      return 'unknown';\n  }\n}\n\n// timeline can be paused when directly changing the state\nlet isTimelineActive = true;\nconst componentStateTypes = [];\nconst MUTATIONS_LAYER_ID = 'pinia:mutations';\nconst INSPECTOR_ID = 'pinia';\n/**\r\n * Gets the displayed name of a store in devtools\r\n *\r\n * @param id - id of the store\r\n * @returns a formatted string\r\n */\nconst getStoreType = id => 'üçç ' + id;\n/**\r\n * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab\r\n * as soon as it is added to the application.\r\n *\r\n * @param app - Vue application\r\n * @param pinia - pinia instance\r\n */\nfunction registerPiniaDevtools(app, pinia) {\n  setupDevtoolsPlugin({\n    id: 'dev.esm.pinia',\n    label: 'Pinia üçç',\n    logo: 'https://pinia.esm.dev/logo.svg',\n    packageName: 'pinia',\n    homepage: 'https://pinia.esm.dev',\n    componentStateTypes,\n    app\n  }, api => {\n    api.addTimelineLayer({\n      id: MUTATIONS_LAYER_ID,\n      label: `Pinia üçç`,\n      color: 0xe5df88\n    });\n    api.addInspector({\n      id: INSPECTOR_ID,\n      label: 'Pinia üçç',\n      icon: 'storage',\n      treeFilterPlaceholder: 'Search stores',\n      actions: [{\n        icon: 'content_copy',\n        action: () => {\n          actionGlobalCopyState(pinia);\n        },\n        tooltip: 'Serialize and copy the state'\n      }, {\n        icon: 'content_paste',\n        action: async () => {\n          await actionGlobalPasteState(pinia);\n          api.sendInspectorTree(INSPECTOR_ID);\n          api.sendInspectorState(INSPECTOR_ID);\n        },\n        tooltip: 'Replace the state with the content of your clipboard'\n      }, {\n        icon: 'save',\n        action: () => {\n          actionGlobalSaveState(pinia);\n        },\n        tooltip: 'Save the state as a JSON file'\n      }, {\n        icon: 'folder_open',\n        action: async () => {\n          await actionGlobalOpenStateFile(pinia);\n          api.sendInspectorTree(INSPECTOR_ID);\n          api.sendInspectorState(INSPECTOR_ID);\n        },\n        tooltip: 'Import the state from a JSON file'\n      }]\n    });\n    api.on.inspectComponent((payload, ctx) => {\n      const proxy = payload.componentInstance && payload.componentInstance.proxy;\n      if (proxy && proxy._pStores) {\n        const piniaStores = payload.componentInstance.proxy._pStores;\n        Object.values(piniaStores).forEach(store => {\n          payload.instanceData.state.push({\n            type: getStoreType(store.$id),\n            key: 'state',\n            editable: true,\n            value: store.$state\n          });\n          if (store._getters && store._getters.length) {\n            payload.instanceData.state.push({\n              type: getStoreType(store.$id),\n              key: 'getters',\n              editable: false,\n              value: store._getters.reduce((getters, key) => {\n                getters[key] = store[key];\n                return getters;\n              }, {})\n            });\n          }\n        });\n      }\n    });\n    api.on.getInspectorTree(payload => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        let stores = [pinia];\n        stores = stores.concat(Array.from(pinia._s.values()));\n        payload.rootNodes = (payload.filter ? stores.filter(store => '$id' in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);\n      }\n    });\n    api.on.getInspectorState(payload => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);\n        if (!inspectedStore) {\n          // this could be the selected store restored for a different project\n          // so it's better not to say anything here\n          return;\n        }\n        if (inspectedStore) {\n          payload.state = formatStoreForInspectorState(inspectedStore);\n        }\n      }\n    });\n    api.on.editInspectorState((payload, ctx) => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);\n        if (!inspectedStore) {\n          return toastMessage(`store \"${payload.nodeId}\" not found`, 'error');\n        }\n        const {\n          path\n        } = payload;\n        if (!isPinia(inspectedStore)) {\n          // access only the state\n          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {\n            path.unshift('$state');\n          }\n        } else {\n          path.unshift('state', 'value');\n        }\n        isTimelineActive = false;\n        payload.set(inspectedStore, path, payload.state.value);\n        isTimelineActive = true;\n      }\n    });\n    api.on.editComponentState(payload => {\n      if (payload.type.startsWith('üçç')) {\n        const storeId = payload.type.replace(/^üçç\\s*/, '');\n        const store = pinia._s.get(storeId);\n        if (!store) {\n          return toastMessage(`store \"${storeId}\" not found`, 'error');\n        }\n        const {\n          path\n        } = payload;\n        if (path[0] !== 'state') {\n          return toastMessage(`Invalid path for store \"${storeId}\":\\n${path}\\nOnly state can be modified.`);\n        }\n        // rewrite the first entry to be able to directly set the state as\n        // well as any other path\n        path[0] = '$state';\n        isTimelineActive = false;\n        payload.set(store, path, payload.state.value);\n        isTimelineActive = true;\n      }\n    });\n  });\n}\nfunction addStoreToDevtools(app, store) {\n  if (!componentStateTypes.includes(getStoreType(store.$id))) {\n    componentStateTypes.push(getStoreType(store.$id));\n  }\n  setupDevtoolsPlugin({\n    id: 'dev.esm.pinia',\n    label: 'Pinia üçç',\n    logo: 'https://pinia.esm.dev/logo.svg',\n    packageName: 'pinia',\n    homepage: 'https://pinia.esm.dev',\n    componentStateTypes,\n    app\n  }, api => {\n    store.$onAction(({\n      after,\n      onError,\n      name,\n      args\n    }) => {\n      const groupId = runningActionId++;\n      api.addTimelineEvent({\n        layerId: MUTATIONS_LAYER_ID,\n        event: {\n          time: Date.now(),\n          title: 'üõ´ ' + name,\n          subtitle: 'start',\n          data: {\n            store: formatDisplay(store.$id),\n            action: formatDisplay(name),\n            args\n          },\n          groupId\n        }\n      });\n      after(result => {\n        activeAction = undefined;\n        api.addTimelineEvent({\n          layerId: MUTATIONS_LAYER_ID,\n          event: {\n            time: Date.now(),\n            title: 'üõ¨ ' + name,\n            subtitle: 'end',\n            data: {\n              store: formatDisplay(store.$id),\n              action: formatDisplay(name),\n              args,\n              result\n            },\n            groupId\n          }\n        });\n      });\n      onError(error => {\n        activeAction = undefined;\n        api.addTimelineEvent({\n          layerId: MUTATIONS_LAYER_ID,\n          event: {\n            time: Date.now(),\n            logType: 'error',\n            title: 'üí• ' + name,\n            subtitle: 'end',\n            data: {\n              store: formatDisplay(store.$id),\n              action: formatDisplay(name),\n              args,\n              error\n            },\n            groupId\n          }\n        });\n      });\n    }, true);\n    store._customProperties.forEach(name => {\n      watch(() => unref(store[name]), (newValue, oldValue) => {\n        api.notifyComponentUpdate();\n        api.sendInspectorState(INSPECTOR_ID);\n        if (isTimelineActive) {\n          api.addTimelineEvent({\n            layerId: MUTATIONS_LAYER_ID,\n            event: {\n              time: Date.now(),\n              title: 'Change',\n              subtitle: name,\n              data: {\n                newValue,\n                oldValue\n              },\n              groupId: activeAction\n            }\n          });\n        }\n      }, {\n        deep: true\n      });\n    });\n    store.$subscribe(({\n      events,\n      type\n    }, state) => {\n      api.notifyComponentUpdate();\n      api.sendInspectorState(INSPECTOR_ID);\n      if (!isTimelineActive) return;\n      // rootStore.state[store.id] = state\n      const eventData = {\n        time: Date.now(),\n        title: formatMutationType(type),\n        data: {\n          store: formatDisplay(store.$id),\n          ...formatEventData(events)\n        },\n        groupId: activeAction\n      };\n      // reset for the next mutation\n      activeAction = undefined;\n      if (type === MutationType.patchFunction) {\n        eventData.subtitle = '‚§µÔ∏è';\n      } else if (type === MutationType.patchObject) {\n        eventData.subtitle = 'üß©';\n      } else if (events && !Array.isArray(events)) {\n        eventData.subtitle = events.type;\n      }\n      if (events) {\n        eventData.data['rawEvent(s)'] = {\n          _custom: {\n            display: 'DebuggerEvent',\n            type: 'object',\n            tooltip: 'raw DebuggerEvent[]',\n            value: events\n          }\n        };\n      }\n      api.addTimelineEvent({\n        layerId: MUTATIONS_LAYER_ID,\n        event: eventData\n      });\n    }, {\n      detached: true,\n      flush: 'sync'\n    });\n    const hotUpdate = store._hotUpdate;\n    store._hotUpdate = markRaw(newStore => {\n      hotUpdate(newStore);\n      api.addTimelineEvent({\n        layerId: MUTATIONS_LAYER_ID,\n        event: {\n          time: Date.now(),\n          title: 'üî• ' + store.$id,\n          subtitle: 'HMR update',\n          data: {\n            store: formatDisplay(store.$id),\n            info: formatDisplay(`HMR update`)\n          }\n        }\n      });\n      // update the devtools too\n      api.notifyComponentUpdate();\n      api.sendInspectorTree(INSPECTOR_ID);\n      api.sendInspectorState(INSPECTOR_ID);\n    });\n    const {\n      $dispose\n    } = store;\n    store.$dispose = () => {\n      $dispose();\n      api.notifyComponentUpdate();\n      api.sendInspectorTree(INSPECTOR_ID);\n      api.sendInspectorState(INSPECTOR_ID);\n      toastMessage(`Disposed \"${store.$id}\" store üóë`);\n    };\n    // trigger an update so it can display new registered stores\n    api.notifyComponentUpdate();\n    api.sendInspectorTree(INSPECTOR_ID);\n    api.sendInspectorState(INSPECTOR_ID);\n    toastMessage(`\"${store.$id}\" store installed üÜï`);\n  });\n}\nlet runningActionId = 0;\nlet activeAction;\n/**\r\n * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the context of all actions, allowing us to set `runningAction` on each access and effectively associating any state mutation to the action.\r\n *\r\n * @param store - store to patch\r\n * @param actionNames - list of actionst to patch\r\n */\nfunction patchActionForGrouping(store, actionNames) {\n  // original actions of the store as they are given by pinia. We are going to override them\n  const actions = actionNames.reduce((storeActions, actionName) => {\n    // use toRaw to avoid tracking #541\n    storeActions[actionName] = toRaw(store)[actionName];\n    return storeActions;\n  }, {});\n  for (const actionName in actions) {\n    store[actionName] = function () {\n      // setActivePinia(store._p)\n      // the running action id is incremented in a before action hook\n      const _actionId = runningActionId;\n      const trackedStore = new Proxy(store, {\n        get(...args) {\n          activeAction = _actionId;\n          return Reflect.get(...args);\n        },\n        set(...args) {\n          activeAction = _actionId;\n          return Reflect.set(...args);\n        }\n      });\n      return actions[actionName].apply(trackedStore, arguments);\n    };\n  }\n}\n/**\r\n * pinia.use(devtoolsPlugin)\r\n */\nfunction devtoolsPlugin({\n  app,\n  store,\n  options\n}) {\n  // HMR module\n  if (store.$id.startsWith('__hot:')) {\n    return;\n  }\n  // only wrap actions in option-defined stores as this technique relies on\n  // wrapping the context of the action with a proxy\n  if (typeof options.state === 'function') {\n    patchActionForGrouping(\n    // @ts-expect-error: can cast the store...\n    store, Object.keys(options.actions));\n    const originalHotUpdate = store._hotUpdate;\n    // Upgrade the HMR to also update the new actions\n    toRaw(store)._hotUpdate = function (newStore) {\n      originalHotUpdate.apply(this, arguments);\n      patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions));\n    };\n  }\n  addStoreToDevtools(app,\n  // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?\n  store);\n}\n\n/**\r\n * Creates a Pinia instance to be used by the application\r\n */\nfunction createPinia() {\n  const scope = effectScope(true);\n  // NOTE: here we could check the window object for a state and directly set it\n  // if there is anything like it with Vue 3 SSR\n  const state = scope.run(() => ref({}));\n  let _p = [];\n  // plugins added before calling app.use(pinia)\n  const toBeInstalled = [];\n  const pinia = markRaw({\n    install(app) {\n      // this allows calling useStore() outside of a component setup after\n      // installing pinia's plugin\n      setActivePinia(pinia);\n      if (!isVue2) {\n        pinia._a = app;\n        app.provide(piniaSymbol, pinia);\n        app.config.globalProperties.$pinia = pinia;\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production' && IS_CLIENT) {\n          registerPiniaDevtools(app, pinia);\n        }\n        toBeInstalled.forEach(plugin => _p.push(plugin));\n      }\n    },\n    use(plugin) {\n      if (!this._a && !isVue2) {\n        toBeInstalled.push(plugin);\n      } else {\n        _p.push(plugin);\n      }\n      return this;\n    },\n    _p,\n    // it's actually undefined here\n    // @ts-expect-error\n    _a: null,\n    _e: scope,\n    _s: new Map(),\n    state\n  });\n  // pinia devtools rely on dev only features so they cannot be forced unless\n  // the dev build of Vue is used\n  if (process.env.NODE_ENV !== 'production' && IS_CLIENT) {\n    pinia.use(devtoolsPlugin);\n  }\n  return pinia;\n}\n\n/**\r\n * Checks if a function is a `StoreDefinition`.\r\n *\r\n * @param fn - object to test\r\n * @returns true if `fn` is a StoreDefinition\r\n */\nconst isUseStore = fn => {\n  return typeof fn === 'function' && typeof fn.$id === 'string';\n};\n/**\r\n * Mutates in place `newState` with `oldState` to _hot update_ it. It will\r\n * remove any key not existing in `newState` and recursively merge plain\r\n * objects.\r\n *\r\n * @param newState - new state object to be patched\r\n * @param oldState - old state that should be used to patch newState\r\n * @returns - newState\r\n */\nfunction patchObject(newState, oldState) {\n  // no need to go through symbols because they cannot be serialized anyway\n  for (const key in oldState) {\n    const subPatch = oldState[key];\n    // skip the whole sub tree\n    if (!(key in newState)) {\n      continue;\n    }\n    const targetValue = newState[key];\n    if (isPlainObject(targetValue) && isPlainObject(subPatch) && !isRef(subPatch) && !isReactive(subPatch)) {\n      newState[key] = patchObject(targetValue, subPatch);\n    } else {\n      // objects are either a bit more complex (e.g. refs) or primitives, so we\n      // just set the whole thing\n      if (isVue2) {\n        set(newState, key, subPatch);\n      } else {\n        newState[key] = subPatch;\n      }\n    }\n  }\n  return newState;\n}\n/**\r\n * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.\r\n *\r\n * @example\r\n * ```js\r\n * const useUser = defineStore(...)\r\n * if (import.meta.hot) {\r\n *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))\r\n * }\r\n * ```\r\n *\r\n * @param initialUseStore - return of the defineStore to hot update\r\n * @param hot - `import.meta.hot`\r\n */\nfunction acceptHMRUpdate(initialUseStore, hot) {\n  return newModule => {\n    const pinia = hot.data.pinia || initialUseStore._pinia;\n    if (!pinia) {\n      // this store is still not used\n      return;\n    }\n    // preserve the pinia instance across loads\n    hot.data.pinia = pinia;\n    // console.log('got data', newStore)\n    for (const exportName in newModule) {\n      const useStore = newModule[exportName];\n      // console.log('checking for', exportName)\n      if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {\n        // console.log('Accepting update for', useStore.$id)\n        const id = useStore.$id;\n        if (id !== initialUseStore.$id) {\n          console.warn(`The id of the store changed from \"${initialUseStore.$id}\" to \"${id}\". Reloading.`);\n          // return import.meta.hot.invalidate()\n          return hot.invalidate();\n        }\n        const existingStore = pinia._s.get(id);\n        if (!existingStore) {\n          console.log(`skipping hmr because store doesn't exist yet`);\n          return;\n        }\n        useStore(pinia, existingStore);\n      }\n    }\n  };\n}\nfunction addSubscription(subscriptions, callback, detached) {\n  subscriptions.push(callback);\n  const removeSubscription = () => {\n    const idx = subscriptions.indexOf(callback);\n    if (idx > -1) {\n      subscriptions.splice(idx, 1);\n    }\n  };\n  if (!detached && getCurrentInstance()) {\n    onUnmounted(removeSubscription);\n  }\n  return removeSubscription;\n}\nfunction triggerSubscriptions(subscriptions, ...args) {\n  subscriptions.forEach(callback => {\n    callback(...args);\n  });\n}\nfunction innerPatch(target, patchToApply) {\n  // no need to go through symbols because they cannot be serialized anyway\n  for (const key in patchToApply) {\n    const subPatch = patchToApply[key];\n    const targetValue = target[key];\n    if (isPlainObject(targetValue) && isPlainObject(subPatch) && !isRef(subPatch) && !isReactive(subPatch)) {\n      target[key] = innerPatch(targetValue, subPatch);\n    } else {\n      // @ts-expect-error: subPatch is a valid value\n      target[key] = subPatch;\n    }\n  }\n  return target;\n}\nconst {\n  assign\n} = Object;\nfunction isComputed(o) {\n  if (isVue2) {\n    const descriptor = o ? Object.getOwnPropertyDescriptor(o, 'value') : null;\n    return descriptor && descriptor.get &&\n    // TODO: make something in @vue/composition-api to be able to check this\n    descriptor.get.toString().length > 42;\n  }\n  return o && o.effect;\n}\nfunction createOptionsStore(id, options, pinia, hot) {\n  const {\n    state,\n    actions,\n    getters\n  } = options;\n  const initialState = pinia.state.value[id];\n  let store;\n  function setup() {\n    if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n      if (isVue2) {\n        set(pinia.state.value, id, state ? state() : {});\n      } else {\n        pinia.state.value[id] = state ? state() : {};\n      }\n    }\n    // avoid creating a state in pinia.state.value\n    const localState = process.env.NODE_ENV !== 'production' && hot ?\n    // use ref() to unwrap refs inside state TODO: check if this is still necessary\n    toRefs(ref(state ? state() : {}).value) : toRefs(pinia.state.value[id]);\n    return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {\n      computedGetters[name] = markRaw(computed(() => {\n        setActivePinia(pinia);\n        // it was created just before\n        const store = pinia._s.get(id);\n        // allow cross using stores\n        if (isVue2 && !store._r) return;\n        // @ts-expect-error\n        // return getters![name].call(context, context)\n        // TODO: avoid reading the getter while assigning with a global variable\n        return getters[name].call(store, store);\n      }));\n      return computedGetters;\n    }, {}));\n  }\n  store = createSetupStore(id, setup, options, pinia, hot);\n  store.$reset = function $reset() {\n    const newState = state ? state() : {};\n    // we use a patch to group all changes into one single subscription\n    this.$patch($state => {\n      assign($state, newState);\n    });\n  };\n  return store;\n}\nconst noop = () => {};\nfunction createSetupStore($id, setup, options = {}, pinia, hot) {\n  let scope;\n  const buildState = options.state;\n  const optionsForPlugin = {\n    actions: {},\n    ...options\n  };\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && !pinia._e.active) {\n    throw new Error('Pinia destroyed');\n  }\n  // watcher options for $subscribe\n  const $subscribeOptions = {\n    deep: true\n    // flush: 'post',\n  };\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production' && !isVue2) {\n    $subscribeOptions.onTrigger = event => {\n      /* istanbul ignore else */\n      if (isListening) {\n        debuggerEvents = event;\n        // avoid triggering this while the store is being built and the state is being set in pinia\n      } else if (isListening == false && !store._hotUpdating) {\n        // let patch send all the events together later\n        /* istanbul ignore else */\n        if (Array.isArray(debuggerEvents)) {\n          debuggerEvents.push(event);\n        } else {\n          console.error('üçç debuggerEvents should be an array. This is most likely an internal Pinia bug.');\n        }\n      }\n    };\n  }\n  // internal state\n  let isListening; // set to true at the end\n  let subscriptions = markRaw([]);\n  let actionSubscriptions = markRaw([]);\n  let debuggerEvents;\n  const initialState = pinia.state.value[$id];\n  if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n    if (isVue2) {\n      set(pinia.state.value, $id, {});\n    } else {\n      pinia.state.value[$id] = {};\n    }\n  }\n  const hotState = ref({});\n  function $patch(partialStateOrMutator) {\n    let subscriptionMutation;\n    isListening = false;\n    // reset the debugger events since patches are sync\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      debuggerEvents = [];\n    }\n    if (typeof partialStateOrMutator === 'function') {\n      partialStateOrMutator(pinia.state.value[$id]);\n      subscriptionMutation = {\n        type: MutationType.patchFunction,\n        storeId: $id,\n        events: debuggerEvents\n      };\n    } else {\n      innerPatch(pinia.state.value[$id], partialStateOrMutator);\n      subscriptionMutation = {\n        type: MutationType.patchObject,\n        payload: partialStateOrMutator,\n        storeId: $id,\n        events: debuggerEvents\n      };\n    }\n    isListening = true;\n    // because we paused the watcher, we need to manually call the subscriptions\n    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);\n  }\n  /* istanbul ignore next */\n  const $reset = process.env.NODE_ENV !== 'production' ? () => {\n    throw new Error(`üçç: Store \"${$id}\" is build using the setup syntax and does not implement $reset().`);\n  } : noop;\n  function $dispose() {\n    scope.stop();\n    subscriptions = [];\n    actionSubscriptions = [];\n    pinia._s.delete($id);\n  }\n  /**\r\n   * Wraps an action to handle subscriptions.\r\n   *\r\n   * @param name - name of the action\r\n   * @param action - action to wrap\r\n   * @returns a wrapped action to handle subscriptions\r\n   */\n  function wrapAction(name, action) {\n    return function () {\n      setActivePinia(pinia);\n      const args = Array.from(arguments);\n      let afterCallback = noop;\n      let onErrorCallback = noop;\n      function after(callback) {\n        afterCallback = callback;\n      }\n      function onError(callback) {\n        onErrorCallback = callback;\n      }\n      // @ts-expect-error\n      triggerSubscriptions(actionSubscriptions, {\n        args,\n        name,\n        store,\n        after,\n        onError\n      });\n      let ret;\n      try {\n        ret = action.apply(this && this.$id === $id ? this : store, args);\n        // handle sync errors\n      } catch (error) {\n        if (onErrorCallback(error) !== false) {\n          throw error;\n        }\n      }\n      if (ret instanceof Promise) {\n        return ret.then(value => {\n          const newRet = afterCallback(value);\n          // allow the afterCallback to override the return value\n          return newRet === undefined ? value : newRet;\n        }).catch(error => {\n          if (onErrorCallback(error) !== false) {\n            return Promise.reject(error);\n          }\n        });\n      }\n      // allow the afterCallback to override the return value\n      const newRet = afterCallback(ret);\n      return newRet === undefined ? ret : newRet;\n    };\n  }\n  const _hmrPayload = /*#__PURE__*/markRaw({\n    actions: {},\n    getters: {},\n    state: [],\n    hotState\n  });\n  const partialStore = {\n    _p: pinia,\n    // _s: scope,\n    $id,\n    $onAction: addSubscription.bind(null, actionSubscriptions),\n    $patch,\n    $reset,\n    $subscribe(callback, options = {}) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && typeof options === 'boolean') {\n        console.warn(`[üçç]: store.$subscribe() no longer accepts a boolean as the 2nd parameter:\\n` + `Replace \"store.$subscribe(fn, ${String(options)})\" with \"store.$subscribe(fn, { detached: ${String(options)} })\".\\nThis will fail in production.`);\n        options = {\n          detached: options\n        };\n      }\n      const _removeSubscription = addSubscription(subscriptions, callback,\n      // @ts-expect-error: until the deprecation is removed\n      options.detached);\n      const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state, oldState) => {\n        if (isListening) {\n          callback({\n            storeId: $id,\n            type: MutationType.direct,\n            events: debuggerEvents\n          }, state);\n        }\n      }, assign({}, $subscribeOptions, options)));\n      const removeSubscription = () => {\n        stopWatcher();\n        _removeSubscription();\n      };\n      return removeSubscription;\n    },\n    $dispose\n  };\n  if (isVue2) {\n    // start as non ready\n    partialStore._r = false;\n  }\n  const store = reactive(assign(process.env.NODE_ENV !== 'production' && IS_CLIENT ?\n  // devtools custom properties\n  {\n    _customProperties: markRaw(new Set()),\n    _hmrPayload\n  } : {}, partialStore\n  // must be added later\n  // setupStore\n  ));\n  // store the partial store now so the setup of stores can instantiate each other before they are finished without\n  // creating infinite loops.\n  pinia._s.set($id, store);\n  // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped\n  const setupStore = pinia._e.run(() => {\n    scope = effectScope();\n    return scope.run(() => setup());\n  });\n  // overwrite existing actions to support $onAction\n  for (const key in setupStore) {\n    const prop = setupStore[key];\n    if (isRef(prop) && !isComputed(prop) || isReactive(prop)) {\n      // mark it as a piece of state to be serialized\n      if (process.env.NODE_ENV !== 'production' && hot) {\n        set(hotState.value, key, toRef(setupStore, key));\n        // createOptionStore directly sets the state in pinia.state.value so we\n        // can just skip that\n      } else if (!buildState) {\n        // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created\n        if (initialState) {\n          if (isRef(prop)) {\n            prop.value = initialState[key];\n          } else {\n            // probably a reactive object, lets recursively assign\n            innerPatch(prop, initialState[key]);\n          }\n        }\n        // transfer the ref to the pinia state to keep everything in sync\n        if (isVue2) {\n          set(pinia.state.value[$id], key, prop);\n        } else {\n          pinia.state.value[$id][key] = prop;\n        }\n      }\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        _hmrPayload.state.push(key);\n      }\n      // action\n    } else if (typeof prop === 'function') {\n      // @ts-expect-error: we are overriding the function we avoid wrapping if\n      const actionValue = process.env.NODE_ENV !== 'production' && hot ? prop : wrapAction(key, prop);\n      // this a hot module replacement store because the hotUpdate method needs\n      // to do it with the right context\n      if (isVue2) {\n        set(setupStore, key, actionValue);\n      } else {\n        // @ts-expect-error\n        setupStore[key] = actionValue;\n      }\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        _hmrPayload.actions[key] = prop;\n      }\n      // list actions so they can be used in plugins\n      // @ts-expect-error\n      optionsForPlugin.actions[key] = prop;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // add getters for devtools\n      if (isComputed(prop)) {\n        _hmrPayload.getters[key] = buildState ?\n        // @ts-expect-error\n        options.getters[key] : prop;\n        if (IS_CLIENT) {\n          const getters =\n          // @ts-expect-error: it should be on the store\n          setupStore._getters || (setupStore._getters = markRaw([]));\n          getters.push(key);\n        }\n      }\n    }\n  }\n  // add the state, getters, and action properties\n  if (isVue2) {\n    Object.keys(setupStore).forEach(key => {\n      set(store, key,\n      // @ts-expect-error: valid key indexing\n      setupStore[key]);\n    });\n  } else {\n    assign(store, setupStore);\n  }\n  // use this instead of a computed with setter to be able to create it anywhere\n  // without linking the computed lifespan to wherever the store is first\n  // created.\n  Object.defineProperty(store, '$state', {\n    get: () => process.env.NODE_ENV !== 'production' && hot ? hotState.value : pinia.state.value[$id],\n    set: state => {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && hot) {\n        throw new Error('cannot set hotState');\n      }\n      $patch($state => {\n        assign($state, state);\n      });\n    }\n  });\n  // add the hotUpdate before plugins to allow them to override it\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    store._hotUpdate = markRaw(newStore => {\n      store._hotUpdating = true;\n      newStore._hmrPayload.state.forEach(stateKey => {\n        if (stateKey in store.$state) {\n          const newStateTarget = newStore.$state[stateKey];\n          const oldStateSource = store.$state[stateKey];\n          if (typeof newStateTarget === 'object' && isPlainObject(newStateTarget) && isPlainObject(oldStateSource)) {\n            patchObject(newStateTarget, oldStateSource);\n          } else {\n            // transfer the ref\n            newStore.$state[stateKey] = oldStateSource;\n          }\n        }\n        // patch direct access properties to allow store.stateProperty to work as\n        // store.$state.stateProperty\n        set(store, stateKey, toRef(newStore.$state, stateKey));\n      });\n      // remove deleted state properties\n      Object.keys(store.$state).forEach(stateKey => {\n        if (!(stateKey in newStore.$state)) {\n          del(store, stateKey);\n        }\n      });\n      // avoid devtools logging this as a mutation\n      isListening = false;\n      pinia.state.value[$id] = toRef(newStore._hmrPayload, 'hotState');\n      isListening = true;\n      for (const actionName in newStore._hmrPayload.actions) {\n        const action = newStore[actionName];\n        set(store, actionName, wrapAction(actionName, action));\n      }\n      // TODO: does this work in both setup and option store?\n      for (const getterName in newStore._hmrPayload.getters) {\n        const getter = newStore._hmrPayload.getters[getterName];\n        const getterValue = buildState ?\n        // special handling of options api\n        computed(() => {\n          setActivePinia(pinia);\n          return getter.call(store, store);\n        }) : getter;\n        set(store, getterName, getterValue);\n      }\n      // remove deleted getters\n      Object.keys(store._hmrPayload.getters).forEach(key => {\n        if (!(key in newStore._hmrPayload.getters)) {\n          del(store, key);\n        }\n      });\n      // remove old actions\n      Object.keys(store._hmrPayload.actions).forEach(key => {\n        if (!(key in newStore._hmrPayload.actions)) {\n          del(store, key);\n        }\n      });\n      // update the values used in devtools and to allow deleting new properties later on\n      store._hmrPayload = newStore._hmrPayload;\n      store._getters = newStore._getters;\n      store._hotUpdating = false;\n    });\n    const nonEnumerable = {\n      writable: true,\n      configurable: true,\n      // avoid warning on devtools trying to display this property\n      enumerable: false\n    };\n    if (IS_CLIENT) {\n      ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach(p => {\n        Object.defineProperty(store, p, {\n          value: store[p],\n          ...nonEnumerable\n        });\n      });\n    }\n  }\n  if (isVue2) {\n    // mark the store as ready before pluginsn\n    store._r = true;\n  }\n  // apply all plugins\n  pinia._p.forEach(extender => {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production' && IS_CLIENT) {\n      const extensions = scope.run(() => extender({\n        store,\n        app: pinia._a,\n        pinia,\n        // @ts-expect-error\n        options: optionsForPlugin\n      }));\n      Object.keys(extensions || {}).forEach(key => store._customProperties.add(key));\n      assign(store, extensions);\n    } else {\n      assign(store, scope.run(() => extender({\n        store,\n        app: pinia._a,\n        pinia,\n        // @ts-expect-error\n        options: optionsForPlugin\n      })));\n    }\n  });\n  if (process.env.NODE_ENV !== 'production' && store.$state && typeof store.$state === 'object' && typeof store.$state.constructor === 'function' && !store.$state.constructor.toString().includes('[native code]')) {\n    console.warn(`[üçç]: The \"state\" must be a plain object. It cannot be\\n\\tstate: () => new MyClass()`);\n  }\n  // only apply hydrate to option stores with an initial state in pinia\n  if (initialState && buildState) {\n    (options.hydrate || innerPatch)(store, initialState);\n  }\n  isListening = true;\n  return store;\n}\nfunction defineStore(\n// TODO: add proper types from above\nidOrOptions, setup, setupOptions) {\n  let id;\n  let options;\n  const isSetupStore = typeof setup === 'function';\n  if (typeof idOrOptions === 'string') {\n    id = idOrOptions;\n    // the option store setup will contain the actual options in this case\n    options = isSetupStore ? setupOptions : setup;\n  } else {\n    options = idOrOptions;\n    id = idOrOptions.id;\n  }\n  function useStore(pinia, hot) {\n    const currentInstance = getCurrentInstance();\n    pinia =\n    // in test mode, ignore the argument provided as we can always retrieve a\n    // pinia instance with getActivePinia()\n    (process.env.NODE_ENV === 'test' && activePinia && activePinia._testing ? null : pinia) || currentInstance && inject(piniaSymbol);\n    if (pinia) setActivePinia(pinia);\n    if (process.env.NODE_ENV !== 'production' && !activePinia) {\n      throw new Error(`[üçç]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\\n\\n` + `const pinia = createPinia()\\n` + `app.use(pinia)\\n\\n` + `This will fail in production.`);\n    }\n    pinia = activePinia;\n    if (!pinia._s.has(id)) {\n      // creating the store registers it in `pinia._s`\n      if (isSetupStore) {\n        createSetupStore(id, setup, options, pinia);\n      } else {\n        createOptionsStore(id, options, pinia);\n      }\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        // @ts-expect-error: not the right inferred type\n        useStore._pinia = pinia;\n      }\n    }\n    const store = pinia._s.get(id);\n    if (process.env.NODE_ENV !== 'production' && hot) {\n      const hotId = '__hot:' + id;\n      const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign({}, options), pinia, true);\n      hot._hotUpdate(newStore);\n      // cleanup the state properties and the store from the cache\n      delete pinia.state.value[hotId];\n      pinia._s.delete(hotId);\n    }\n    // save stores in instances to access them devtools\n    if (process.env.NODE_ENV !== 'production' && IS_CLIENT && currentInstance && currentInstance.proxy &&\n    // avoid adding stores that are just built for hot module replacement\n    !hot) {\n      const vm = currentInstance.proxy;\n      const cache = '_pStores' in vm ? vm._pStores : vm._pStores = {};\n      cache[id] = store;\n    }\n    // StoreGeneric cannot be casted towards Store\n    return store;\n  }\n  useStore.$id = id;\n  return useStore;\n}\nlet mapStoreSuffix = 'Store';\n/**\r\n * Changes the suffix added by `mapStores()`. Can be set to an empty string.\r\n * Defaults to `\"Store\"`. Make sure to extend the MapStoresCustomization\r\n * interface if you need are using TypeScript.\r\n *\r\n * @param suffix - new suffix\r\n */\nfunction setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS\n) {\n  mapStoreSuffix = suffix;\n}\n/**\r\n * Allows using stores without the composition API (`setup()`) by generating an\r\n * object to be spread in the `computed` field of a component. It accepts a list\r\n * of store definitions.\r\n *\r\n * @example\r\n * ```js\r\n * export default {\r\n *   computed: {\r\n *     // other computed properties\r\n *     ...mapStores(useUserStore, useCartStore)\r\n *   },\r\n *\r\n *   created() {\r\n *     this.userStore // store with id \"user\"\r\n *     this.cartStore // store with id \"cart\"\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @param stores - list of stores to map to an object\r\n */\nfunction mapStores(...stores) {\n  if (process.env.NODE_ENV !== 'production' && Array.isArray(stores[0])) {\n    console.warn(`[üçç]: Directly pass all stores to \"mapStores()\" without putting them in an array:\\n` + `Replace\\n` + `\\tmapStores([useAuthStore, useCartStore])\\n` + `with\\n` + `\\tmapStores(useAuthStore, useCartStore)\\n` + `This will fail in production if not fixed.`);\n    stores = stores[0];\n  }\n  return stores.reduce((reduced, useStore) => {\n    // @ts-expect-error: $id is added by defineStore\n    reduced[useStore.$id + mapStoreSuffix] = function () {\n      return useStore(this.$pinia);\n    };\n    return reduced;\n  }, {});\n}\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\nfunction mapState(useStore, keysOrMapper) {\n  return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key) => {\n    reduced[key] = function () {\n      return useStore(this.$pinia)[key];\n    };\n    return reduced;\n  }, {}) : Object.keys(keysOrMapper).reduce((reduced, key) => {\n    // @ts-expect-error\n    reduced[key] = function () {\n      const store = useStore(this.$pinia);\n      const storeKey = keysOrMapper[key];\n      // for some reason TS is unable to infer the type of storeKey to be a\n      // function\n      return typeof storeKey === 'function' ? storeKey.call(this, store) : store[storeKey];\n    };\n    return reduced;\n  }, {});\n}\n/**\r\n * Alias for `mapState()`. You should use `mapState()` instead.\r\n * @deprecated use `mapState()` instead.\r\n */\nconst mapGetters = mapState;\n/**\r\n * Allows directly using actions from your store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `methods` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\nfunction mapActions(useStore, keysOrMapper) {\n  return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key) => {\n    // @ts-expect-error\n    reduced[key] = function (...args) {\n      return useStore(this.$pinia)[key](...args);\n    };\n    return reduced;\n  }, {}) : Object.keys(keysOrMapper).reduce((reduced, key) => {\n    // @ts-expect-error\n    reduced[key] = function (...args) {\n      return useStore(this.$pinia)[keysOrMapper[key]](...args);\n    };\n    return reduced;\n  }, {});\n}\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\nfunction mapWritableState(useStore, keysOrMapper) {\n  return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key) => {\n    // @ts-ignore\n    reduced[key] = {\n      get() {\n        return useStore(this.$pinia)[key];\n      },\n      set(value) {\n        // it's easier to type it here as any\n        return useStore(this.$pinia)[key] = value;\n      }\n    };\n    return reduced;\n  }, {}) : Object.keys(keysOrMapper).reduce((reduced, key) => {\n    // @ts-ignore\n    reduced[key] = {\n      get() {\n        return useStore(this.$pinia)[keysOrMapper[key]];\n      },\n      set(value) {\n        // it's easier to type it here as any\n        return useStore(this.$pinia)[keysOrMapper[key]] = value;\n      }\n    };\n    return reduced;\n  }, {});\n}\n\n/**\r\n * Creates an object of references with all the state, getters, and plugin-added\r\n * state properties of the store. Similar to `toRefs()` but specifically\r\n * designed for Pinia stores so methods and non reactive properties are\r\n * completely ignored.\r\n *\r\n * @param store - store to extract the refs from\r\n */\nfunction storeToRefs(store) {\n  store = toRaw(store);\n  const refs = {};\n  for (const key in store) {\n    const value = store[key];\n    if (isRef(value) || isReactive(value)) {\n      // @ts-expect-error: the key is state or getter\n      refs[key] =\n      // ---\n      toRef(store, key);\n    }\n  }\n  return refs;\n}\n\n/**\r\n * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need\r\n * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:\r\n * https://pinia.esm.dev/ssr/nuxt.html.\r\n *\r\n * @example\r\n * ```js\r\n * import Vue from 'vue'\r\n * import { PiniaVuePlugin, createPinia } from 'pinia'\r\n *\r\n * Vue.use(PiniaVuePlugin)\r\n * const pinia = createPinia()\r\n *\r\n * new Vue({\r\n *   el: '#app',\r\n *   // ...\r\n *   pinia,\r\n * })\r\n * ```\r\n *\r\n * @param _Vue\r\n */\nconst PiniaVuePlugin = function (_Vue) {\n  // Equivalent of\n  // app.config.globalProperties.$pinia = pinia\n  _Vue.mixin({\n    beforeCreate() {\n      const options = this.$options;\n      if (options.pinia) {\n        const pinia = options.pinia;\n        // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/master/src/apis/inject.ts#L30\n        /* istanbul ignore else */\n        if (!this._provided) {\n          const provideCache = {};\n          Object.defineProperty(this, '_provided', {\n            get: () => provideCache,\n            set: v => Object.assign(provideCache, v)\n          });\n        }\n        this._provided[piniaSymbol] = pinia;\n        // propagate the pinia instance in an SSR friendly way\n        // avoid adding it to nuxt twice\n        /* istanbul ignore else */\n        if (!this.$pinia) {\n          this.$pinia = pinia;\n        }\n        pinia._a = this;\n        if (IS_CLIENT) {\n          // this allows calling useStore() outside of a component setup after\n          // installing pinia's plugin\n          setActivePinia(pinia);\n          if (process.env.NODE_ENV !== 'production') {\n            registerPiniaDevtools(pinia._a, pinia);\n          }\n        }\n      } else if (!this.$pinia && options.parent && options.parent.$pinia) {\n        this.$pinia = options.parent.$pinia;\n      }\n    },\n    destroyed() {\n      delete this._pStores;\n    }\n  });\n};\n/**\r\n * @deprecated use `PiniaVuePlugin` instead.\r\n */\nconst PiniaPlugin = PiniaVuePlugin;\nexport { MutationType, PiniaPlugin, PiniaVuePlugin, acceptHMRUpdate, createPinia, defineStore, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, storeToRefs };","map":{"version":3,"names":["getCurrentInstance","inject","toRaw","watch","unref","markRaw","effectScope","ref","isVue2","isRef","isReactive","set","onUnmounted","reactive","toRef","del","computed","toRefs","setupDevtoolsPlugin","activePinia","setActivePinia","pinia","getActivePinia","piniaSymbol","process","env","NODE_ENV","Symbol","isPlainObject","o","Object","prototype","toString","call","toJSON","MutationType","IS_CLIENT","window","_global","self","global","globalThis","HTMLElement","bom","blob","autoBom","test","type","Blob","String","fromCharCode","download","url","name","opts","xhr","XMLHttpRequest","open","responseType","onload","saveAs","response","onerror","console","error","send","corsEnabled","e","status","click","node","dispatchEvent","MouseEvent","evt","document","createEvent","initMouseEvent","_navigator","navigator","userAgent","isMacOSWebView","HTMLAnchorElement","downloadSaveAs","msSaveAs","fileSaverSaveAs","a","createElement","rel","href","origin","location","target","URL","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","popup","title","body","innerText","force","isSafari","isChromeIOS","FileReader","reader","onloadend","result","Error","replace","assign","readAsDataURL","toastMessage","message","piniaMessage","__VUE_DEVTOOLS_TOAST__","warn","log","isPinia","checkClipboardAccess","checkNotFocusedError","toLowerCase","includes","actionGlobalCopyState","clipboard","writeText","JSON","stringify","state","value","actionGlobalPasteState","parse","readText","actionGlobalSaveState","fileInput","getFileOpener","accept","openFile","Promise","resolve","reject","onchange","files","file","item","text","oncancel","actionGlobalOpenStateFile","formatDisplay","display","_custom","PINIA_ROOT_LABEL","PINIA_ROOT_ID","formatStoreForInspectorTree","store","id","$id","label","formatStoreForInspectorState","keys","map","storeId","editable","key","$state","_getters","length","getters","getterName","_customProperties","size","customProperties","Array","from","formatEventData","events","isArray","reduce","data","event","push","operations","oldValue","newValue","operation","formatMutationType","direct","patchFunction","patchObject","isTimelineActive","componentStateTypes","MUTATIONS_LAYER_ID","INSPECTOR_ID","getStoreType","registerPiniaDevtools","app","logo","packageName","homepage","api","addTimelineLayer","color","addInspector","icon","treeFilterPlaceholder","actions","action","tooltip","sendInspectorTree","sendInspectorState","on","inspectComponent","payload","ctx","proxy","componentInstance","_pStores","piniaStores","values","forEach","instanceData","getInspectorTree","inspectorId","stores","concat","_s","rootNodes","filter","getInspectorState","inspectedStore","nodeId","get","editInspectorState","path","has","unshift","editComponentState","startsWith","addStoreToDevtools","$onAction","after","onError","args","groupId","runningActionId","addTimelineEvent","layerId","time","Date","now","subtitle","activeAction","undefined","logType","notifyComponentUpdate","deep","$subscribe","eventData","detached","flush","hotUpdate","_hotUpdate","newStore","info","$dispose","patchActionForGrouping","actionNames","storeActions","actionName","_actionId","trackedStore","Proxy","Reflect","apply","arguments","devtoolsPlugin","options","originalHotUpdate","_hmrPayload","createPinia","scope","run","_p","toBeInstalled","install","_a","provide","config","globalProperties","$pinia","plugin","use","_e","Map","isUseStore","fn","newState","oldState","subPatch","targetValue","acceptHMRUpdate","initialUseStore","hot","newModule","_pinia","exportName","useStore","invalidate","existingStore","addSubscription","subscriptions","callback","removeSubscription","idx","indexOf","splice","triggerSubscriptions","innerPatch","patchToApply","isComputed","descriptor","getOwnPropertyDescriptor","effect","createOptionsStore","initialState","setup","localState","computedGetters","_r","createSetupStore","$reset","$patch","noop","buildState","optionsForPlugin","active","$subscribeOptions","onTrigger","isListening","debuggerEvents","_hotUpdating","actionSubscriptions","hotState","partialStateOrMutator","subscriptionMutation","stop","delete","wrapAction","afterCallback","onErrorCallback","ret","then","newRet","catch","partialStore","bind","_removeSubscription","stopWatcher","Set","setupStore","prop","actionValue","defineProperty","stateKey","newStateTarget","oldStateSource","getter","getterValue","nonEnumerable","writable","configurable","enumerable","p","extender","extensions","add","constructor","hydrate","defineStore","idOrOptions","setupOptions","isSetupStore","currentInstance","_testing","hotId","vm","cache","mapStoreSuffix","setMapStoreSuffix","suffix","mapStores","reduced","mapState","keysOrMapper","storeKey","mapGetters","mapActions","mapWritableState","storeToRefs","refs","PiniaVuePlugin","_Vue","mixin","beforeCreate","$options","_provided","provideCache","v","parent","destroyed","PiniaPlugin"],"sources":["D:/ForWork/ÊâæÂÆû‰π†/‰∏≠‰ø°ËØÅÂà∏codeÊØîËµõ/Â§çËµõ/front/news-front/node_modules/pinia/dist/pinia.esm-bundler.js"],"sourcesContent":["/*!\n  * pinia v2.0.0-rc.10\n  * (c) 2021 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, toRaw, watch, unref, markRaw, effectScope, ref, isVue2, isRef, isReactive, set, onUnmounted, reactive, toRef, del, computed, toRefs } from 'vue-demi';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\r\n * setActivePinia must be called to handle SSR at the top of functions like\r\n * `fetch`, `setup`, `serverPrefetch` and others\r\n */\r\nlet activePinia;\r\n/**\r\n * Sets or unsets the active pinia. Used in SSR and internally when calling\r\n * actions and getters\r\n *\r\n * @param pinia - Pinia instance\r\n */\r\nconst setActivePinia = (pinia) => (activePinia = pinia);\r\n/**\r\n * Get the currently active pinia if there is any.\r\n */\r\nconst getActivePinia = () => (getCurrentInstance() && inject(piniaSymbol)) || activePinia;\r\nconst piniaSymbol = ((process.env.NODE_ENV !== 'production') ? Symbol('pinia') : /* istanbul ignore next */ Symbol());\n\nfunction isPlainObject(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\no) {\r\n    return (o &&\r\n        typeof o === 'object' &&\r\n        Object.prototype.toString.call(o) === '[object Object]' &&\r\n        typeof o.toJSON !== 'function');\r\n}\r\n// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }\r\n// TODO: can we change these to numbers?\r\n/**\r\n * Possible types for SubscriptionCallback\r\n */\r\nvar MutationType;\r\n(function (MutationType) {\r\n    /**\r\n     * Direct mutation of the state:\r\n     *\r\n     * - `store.name = 'new name'`\r\n     * - `store.$state.name = 'new name'`\r\n     * - `store.list.push('new item')`\r\n     */\r\n    MutationType[\"direct\"] = \"direct\";\r\n    /**\r\n     * Mutated the state with `$patch` and an object\r\n     *\r\n     * - `store.$patch({ name: 'newName' })`\r\n     */\r\n    MutationType[\"patchObject\"] = \"patch object\";\r\n    /**\r\n     * Mutated the state with `$patch` and a function\r\n     *\r\n     * - `store.$patch(state => state.name = 'newName')`\r\n     */\r\n    MutationType[\"patchFunction\"] = \"patch function\";\r\n    // maybe reset? for $state = {} and $reset\r\n})(MutationType || (MutationType = {}));\n\nconst IS_CLIENT = typeof window !== 'undefined';\n\n/*\r\n * FileSaver.js A saveAs() FileSaver implementation.\r\n *\r\n * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin\r\n * Morote.\r\n *\r\n * License : MIT\r\n */\r\n// The one and only way of getting global scope in all environments\r\n// https://stackoverflow.com/q/3277182/1008999\r\nconst _global = /*#__PURE__*/ (() => typeof window === 'object' && window.window === window\r\n    ? window\r\n    : typeof self === 'object' && self.self === self\r\n        ? self\r\n        : typeof global === 'object' && global.global === global\r\n            ? global\r\n            : typeof globalThis === 'object'\r\n                ? globalThis\r\n                : { HTMLElement: null })();\r\nfunction bom(blob, { autoBom = false } = {}) {\r\n    // prepend BOM for UTF-8 XML and text/* types (including HTML)\r\n    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\r\n    if (autoBom &&\r\n        /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\r\n        return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });\r\n    }\r\n    return blob;\r\n}\r\nfunction download(url, name, opts) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url);\r\n    xhr.responseType = 'blob';\r\n    xhr.onload = function () {\r\n        saveAs(xhr.response, name, opts);\r\n    };\r\n    xhr.onerror = function () {\r\n        console.error('could not download file');\r\n    };\r\n    xhr.send();\r\n}\r\nfunction corsEnabled(url) {\r\n    const xhr = new XMLHttpRequest();\r\n    // use sync to avoid popup blocker\r\n    xhr.open('HEAD', url, false);\r\n    try {\r\n        xhr.send();\r\n    }\r\n    catch (e) { }\r\n    return xhr.status >= 200 && xhr.status <= 299;\r\n}\r\n// `a.click()` doesn't work for all browsers (#465)\r\nfunction click(node) {\r\n    try {\r\n        node.dispatchEvent(new MouseEvent('click'));\r\n    }\r\n    catch (e) {\r\n        const evt = document.createEvent('MouseEvents');\r\n        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\r\n        node.dispatchEvent(evt);\r\n    }\r\n}\r\nconst _navigator = \r\n typeof navigator === 'object' ? navigator : { userAgent: '' };\r\n// Detect WebView inside a native macOS app by ruling out all browsers\r\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\r\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\r\nconst isMacOSWebView = /*#__PURE__*/ (() => /Macintosh/.test(_navigator.userAgent) &&\r\n    /AppleWebKit/.test(_navigator.userAgent) &&\r\n    !/Safari/.test(_navigator.userAgent))();\r\nconst saveAs = !IS_CLIENT\r\n    ? () => { } // noop\r\n    : // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\r\n        'download' in HTMLAnchorElement.prototype && !isMacOSWebView\r\n            ? downloadSaveAs\r\n            : // Use msSaveOrOpenBlob as a second approach\r\n                'msSaveOrOpenBlob' in _navigator\r\n                    ? msSaveAs\r\n                    : // Fallback to using FileReader and a popup\r\n                        fileSaverSaveAs;\r\nfunction downloadSaveAs(blob, name = 'download', opts) {\r\n    const a = document.createElement('a');\r\n    a.download = name;\r\n    a.rel = 'noopener'; // tabnabbing\r\n    // TODO: detect chrome extensions & packaged apps\r\n    // a.target = '_blank'\r\n    if (typeof blob === 'string') {\r\n        // Support regular links\r\n        a.href = blob;\r\n        if (a.origin !== location.origin) {\r\n            if (corsEnabled(a.href)) {\r\n                download(blob, name, opts);\r\n            }\r\n            else {\r\n                a.target = '_blank';\r\n                click(a);\r\n            }\r\n        }\r\n        else {\r\n            click(a);\r\n        }\r\n    }\r\n    else {\r\n        // Support blobs\r\n        a.href = URL.createObjectURL(blob);\r\n        setTimeout(function () {\r\n            URL.revokeObjectURL(a.href);\r\n        }, 4e4); // 40s\r\n        setTimeout(function () {\r\n            click(a);\r\n        }, 0);\r\n    }\r\n}\r\nfunction msSaveAs(blob, name = 'download', opts) {\r\n    if (typeof blob === 'string') {\r\n        if (corsEnabled(blob)) {\r\n            download(blob, name, opts);\r\n        }\r\n        else {\r\n            const a = document.createElement('a');\r\n            a.href = blob;\r\n            a.target = '_blank';\r\n            setTimeout(function () {\r\n                click(a);\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        // @ts-ignore: works on windows\r\n        navigator.msSaveOrOpenBlob(bom(blob, opts), name);\r\n    }\r\n}\r\nfunction fileSaverSaveAs(blob, name, opts, popup) {\r\n    // Open a popup immediately do go around popup blocker\r\n    // Mostly only available on user interaction and the fileReader is async so...\r\n    popup = popup || open('', '_blank');\r\n    if (popup) {\r\n        popup.document.title = popup.document.body.innerText = 'downloading...';\r\n    }\r\n    if (typeof blob === 'string')\r\n        return download(blob, name, opts);\r\n    const force = blob.type === 'application/octet-stream';\r\n    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;\r\n    const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\r\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) &&\r\n        typeof FileReader !== 'undefined') {\r\n        // Safari doesn't allow downloading of blob URLs\r\n        const reader = new FileReader();\r\n        reader.onloadend = function () {\r\n            let url = reader.result;\r\n            if (typeof url !== 'string') {\r\n                popup = null;\r\n                throw new Error('Wrong reader.result type');\r\n            }\r\n            url = isChromeIOS\r\n                ? url\r\n                : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\r\n            if (popup) {\r\n                popup.location.href = url;\r\n            }\r\n            else {\r\n                location.assign(url);\r\n            }\r\n            popup = null; // reverse-tabnabbing #460\r\n        };\r\n        reader.readAsDataURL(blob);\r\n    }\r\n    else {\r\n        const url = URL.createObjectURL(blob);\r\n        if (popup)\r\n            popup.location.assign(url);\r\n        else\r\n            location.href = url;\r\n        popup = null; // reverse-tabnabbing #460\r\n        setTimeout(function () {\r\n            URL.revokeObjectURL(url);\r\n        }, 4e4); // 40s\r\n    }\r\n}\n\n/**\r\n * Shows a toast or console.log\r\n *\r\n * @param message - message to log\r\n * @param type - different color of the tooltip\r\n */\r\nfunction toastMessage(message, type) {\r\n    const piniaMessage = 'üçç ' + message;\r\n    if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {\r\n        __VUE_DEVTOOLS_TOAST__(piniaMessage, type);\r\n    }\r\n    else if (type === 'error') {\r\n        console.error(piniaMessage);\r\n    }\r\n    else if (type === 'warn') {\r\n        console.warn(piniaMessage);\r\n    }\r\n    else {\r\n        console.log(piniaMessage);\r\n    }\r\n}\r\nfunction isPinia(o) {\r\n    return '_a' in o && 'install' in o;\r\n}\n\nfunction checkClipboardAccess() {\r\n    if (!('clipboard' in navigator)) {\r\n        toastMessage(`Your browser doesn't support the Clipboard API`, 'error');\r\n        return true;\r\n    }\r\n}\r\nfunction checkNotFocusedError(error) {\r\n    if (error instanceof Error &&\r\n        error.message.toLowerCase().includes('document is not focused')) {\r\n        toastMessage('You need to activate the \"Emulate a focused page\" setting in the \"Rendering\" panel of devtools.', 'warn');\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nasync function actionGlobalCopyState(pinia) {\r\n    if (checkClipboardAccess())\r\n        return;\r\n    try {\r\n        await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));\r\n        toastMessage('Global state copied to clipboard.');\r\n    }\r\n    catch (error) {\r\n        if (checkNotFocusedError(error))\r\n            return;\r\n        toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\r\nasync function actionGlobalPasteState(pinia) {\r\n    if (checkClipboardAccess())\r\n        return;\r\n    try {\r\n        pinia.state.value = JSON.parse(await navigator.clipboard.readText());\r\n        toastMessage('Global state pasted from clipboard.');\r\n    }\r\n    catch (error) {\r\n        if (checkNotFocusedError(error))\r\n            return;\r\n        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\r\nasync function actionGlobalSaveState(pinia) {\r\n    try {\r\n        saveAs(new Blob([JSON.stringify(pinia.state.value)], {\r\n            type: 'text/plain;charset=utf-8',\r\n        }), 'pinia-state.json');\r\n    }\r\n    catch (error) {\r\n        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\r\nlet fileInput;\r\nfunction getFileOpener() {\r\n    if (!fileInput) {\r\n        fileInput = document.createElement('input');\r\n        fileInput.type = 'file';\r\n        fileInput.accept = '.json';\r\n    }\r\n    function openFile() {\r\n        return new Promise((resolve, reject) => {\r\n            fileInput.onchange = async () => {\r\n                const files = fileInput.files;\r\n                if (!files)\r\n                    return resolve(null);\r\n                const file = files.item(0);\r\n                if (!file)\r\n                    return resolve(null);\r\n                return resolve({ text: await file.text(), file });\r\n            };\r\n            // @ts-ignore: TODO: changed from 4.3 to 4.4\r\n            fileInput.oncancel = () => resolve(null);\r\n            fileInput.onerror = reject;\r\n            fileInput.click();\r\n        });\r\n    }\r\n    return openFile;\r\n}\r\nasync function actionGlobalOpenStateFile(pinia) {\r\n    try {\r\n        const open = await getFileOpener();\r\n        const result = await open();\r\n        if (!result)\r\n            return;\r\n        const { text, file } = result;\r\n        pinia.state.value = JSON.parse(text);\r\n        toastMessage(`Global state imported from \"${file.name}\".`);\r\n    }\r\n    catch (error) {\r\n        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\r\n        console.error(error);\r\n    }\r\n}\n\nfunction formatDisplay(display) {\r\n    return {\r\n        _custom: {\r\n            display,\r\n        },\r\n    };\r\n}\r\nconst PINIA_ROOT_LABEL = 'üçç Pinia (root)';\r\nconst PINIA_ROOT_ID = '_root';\r\nfunction formatStoreForInspectorTree(store) {\r\n    return '$id' in store\r\n        ? {\r\n            id: store.$id,\r\n            label: store.$id,\r\n        }\r\n        : {\r\n            id: PINIA_ROOT_ID,\r\n            label: PINIA_ROOT_LABEL,\r\n        };\r\n}\r\nfunction formatStoreForInspectorState(store) {\r\n    if (isPinia(store)) {\r\n        const state = {\r\n            state: Object.keys(store.state.value).map((storeId) => ({\r\n                editable: true,\r\n                key: storeId,\r\n                value: store.state.value[storeId],\r\n            })),\r\n        };\r\n        // TODO: use this version when possible\r\n        // Object.keys(store.state.value).forEach((storeId) => {\r\n        //   const currentState = store.state.value[storeId]\r\n        //   state[storeId] = Object.keys(currentState).map((key) => ({\r\n        //     // is not possible to made editable because no way to get the storeId in\r\n        //     // edit inspector state callback\r\n        //     editable: false,\r\n        //     key,\r\n        //     value: currentState[key],\r\n        //   }))\r\n        // })\r\n        return state;\r\n    }\r\n    const state = {\r\n        state: Object.keys(store.$state).map((key) => ({\r\n            editable: true,\r\n            key,\r\n            value: store.$state[key],\r\n        })),\r\n    };\r\n    // avoid adding empty getters\r\n    if (store._getters && store._getters.length) {\r\n        state.getters = store._getters.map((getterName) => ({\r\n            editable: false,\r\n            key: getterName,\r\n            value: store[getterName],\r\n        }));\r\n    }\r\n    if (store._customProperties.size) {\r\n        state.customProperties = Array.from(store._customProperties).map((key) => ({\r\n            editable: true,\r\n            key,\r\n            value: store[key],\r\n        }));\r\n    }\r\n    return state;\r\n}\r\nfunction formatEventData(events) {\r\n    if (!events)\r\n        return {};\r\n    if (Array.isArray(events)) {\r\n        // TODO: handle add and delete for arrays and objects\r\n        return events.reduce((data, event) => {\r\n            data.keys.push(event.key);\r\n            data.operations.push(event.type);\r\n            data.oldValue[event.key] = event.oldValue;\r\n            data.newValue[event.key] = event.newValue;\r\n            return data;\r\n        }, {\r\n            oldValue: {},\r\n            keys: [],\r\n            operations: [],\r\n            newValue: {},\r\n        });\r\n    }\r\n    else {\r\n        return {\r\n            operation: formatDisplay(events.type),\r\n            key: formatDisplay(events.key),\r\n            oldValue: events.oldValue,\r\n            newValue: events.newValue,\r\n        };\r\n    }\r\n}\r\nfunction formatMutationType(type) {\r\n    switch (type) {\r\n        case MutationType.direct:\r\n            return 'mutation';\r\n        case MutationType.patchFunction:\r\n            return '$patch';\r\n        case MutationType.patchObject:\r\n            return '$patch';\r\n        default:\r\n            return 'unknown';\r\n    }\r\n}\n\n// timeline can be paused when directly changing the state\r\nlet isTimelineActive = true;\r\nconst componentStateTypes = [];\r\nconst MUTATIONS_LAYER_ID = 'pinia:mutations';\r\nconst INSPECTOR_ID = 'pinia';\r\n/**\r\n * Gets the displayed name of a store in devtools\r\n *\r\n * @param id - id of the store\r\n * @returns a formatted string\r\n */\r\nconst getStoreType = (id) => 'üçç ' + id;\r\n/**\r\n * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab\r\n * as soon as it is added to the application.\r\n *\r\n * @param app - Vue application\r\n * @param pinia - pinia instance\r\n */\r\nfunction registerPiniaDevtools(app, pinia) {\r\n    setupDevtoolsPlugin({\r\n        id: 'dev.esm.pinia',\r\n        label: 'Pinia üçç',\r\n        logo: 'https://pinia.esm.dev/logo.svg',\r\n        packageName: 'pinia',\r\n        homepage: 'https://pinia.esm.dev',\r\n        componentStateTypes,\r\n        app,\r\n    }, (api) => {\r\n        api.addTimelineLayer({\r\n            id: MUTATIONS_LAYER_ID,\r\n            label: `Pinia üçç`,\r\n            color: 0xe5df88,\r\n        });\r\n        api.addInspector({\r\n            id: INSPECTOR_ID,\r\n            label: 'Pinia üçç',\r\n            icon: 'storage',\r\n            treeFilterPlaceholder: 'Search stores',\r\n            actions: [\r\n                {\r\n                    icon: 'content_copy',\r\n                    action: () => {\r\n                        actionGlobalCopyState(pinia);\r\n                    },\r\n                    tooltip: 'Serialize and copy the state',\r\n                },\r\n                {\r\n                    icon: 'content_paste',\r\n                    action: async () => {\r\n                        await actionGlobalPasteState(pinia);\r\n                        api.sendInspectorTree(INSPECTOR_ID);\r\n                        api.sendInspectorState(INSPECTOR_ID);\r\n                    },\r\n                    tooltip: 'Replace the state with the content of your clipboard',\r\n                },\r\n                {\r\n                    icon: 'save',\r\n                    action: () => {\r\n                        actionGlobalSaveState(pinia);\r\n                    },\r\n                    tooltip: 'Save the state as a JSON file',\r\n                },\r\n                {\r\n                    icon: 'folder_open',\r\n                    action: async () => {\r\n                        await actionGlobalOpenStateFile(pinia);\r\n                        api.sendInspectorTree(INSPECTOR_ID);\r\n                        api.sendInspectorState(INSPECTOR_ID);\r\n                    },\r\n                    tooltip: 'Import the state from a JSON file',\r\n                },\r\n            ],\r\n        });\r\n        api.on.inspectComponent((payload, ctx) => {\r\n            const proxy = (payload.componentInstance &&\r\n                payload.componentInstance.proxy);\r\n            if (proxy && proxy._pStores) {\r\n                const piniaStores = payload.componentInstance.proxy._pStores;\r\n                Object.values(piniaStores).forEach((store) => {\r\n                    payload.instanceData.state.push({\r\n                        type: getStoreType(store.$id),\r\n                        key: 'state',\r\n                        editable: true,\r\n                        value: store.$state,\r\n                    });\r\n                    if (store._getters && store._getters.length) {\r\n                        payload.instanceData.state.push({\r\n                            type: getStoreType(store.$id),\r\n                            key: 'getters',\r\n                            editable: false,\r\n                            value: store._getters.reduce((getters, key) => {\r\n                                getters[key] = store[key];\r\n                                return getters;\r\n                            }, {}),\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        api.on.getInspectorTree((payload) => {\r\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\r\n                let stores = [pinia];\r\n                stores = stores.concat(Array.from(pinia._s.values()));\r\n                payload.rootNodes = (payload.filter\r\n                    ? stores.filter((store) => '$id' in store\r\n                        ? store.$id\r\n                            .toLowerCase()\r\n                            .includes(payload.filter.toLowerCase())\r\n                        : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase()))\r\n                    : stores).map(formatStoreForInspectorTree);\r\n            }\r\n        });\r\n        api.on.getInspectorState((payload) => {\r\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\r\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\r\n                    ? pinia\r\n                    : pinia._s.get(payload.nodeId);\r\n                if (!inspectedStore) {\r\n                    // this could be the selected store restored for a different project\r\n                    // so it's better not to say anything here\r\n                    return;\r\n                }\r\n                if (inspectedStore) {\r\n                    payload.state = formatStoreForInspectorState(inspectedStore);\r\n                }\r\n            }\r\n        });\r\n        api.on.editInspectorState((payload, ctx) => {\r\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\r\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\r\n                    ? pinia\r\n                    : pinia._s.get(payload.nodeId);\r\n                if (!inspectedStore) {\r\n                    return toastMessage(`store \"${payload.nodeId}\" not found`, 'error');\r\n                }\r\n                const { path } = payload;\r\n                if (!isPinia(inspectedStore)) {\r\n                    // access only the state\r\n                    if (path.length !== 1 ||\r\n                        !inspectedStore._customProperties.has(path[0]) ||\r\n                        path[0] in inspectedStore.$state) {\r\n                        path.unshift('$state');\r\n                    }\r\n                }\r\n                else {\r\n                    path.unshift('state', 'value');\r\n                }\r\n                isTimelineActive = false;\r\n                payload.set(inspectedStore, path, payload.state.value);\r\n                isTimelineActive = true;\r\n            }\r\n        });\r\n        api.on.editComponentState((payload) => {\r\n            if (payload.type.startsWith('üçç')) {\r\n                const storeId = payload.type.replace(/^üçç\\s*/, '');\r\n                const store = pinia._s.get(storeId);\r\n                if (!store) {\r\n                    return toastMessage(`store \"${storeId}\" not found`, 'error');\r\n                }\r\n                const { path } = payload;\r\n                if (path[0] !== 'state') {\r\n                    return toastMessage(`Invalid path for store \"${storeId}\":\\n${path}\\nOnly state can be modified.`);\r\n                }\r\n                // rewrite the first entry to be able to directly set the state as\r\n                // well as any other path\r\n                path[0] = '$state';\r\n                isTimelineActive = false;\r\n                payload.set(store, path, payload.state.value);\r\n                isTimelineActive = true;\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction addStoreToDevtools(app, store) {\r\n    if (!componentStateTypes.includes(getStoreType(store.$id))) {\r\n        componentStateTypes.push(getStoreType(store.$id));\r\n    }\r\n    setupDevtoolsPlugin({\r\n        id: 'dev.esm.pinia',\r\n        label: 'Pinia üçç',\r\n        logo: 'https://pinia.esm.dev/logo.svg',\r\n        packageName: 'pinia',\r\n        homepage: 'https://pinia.esm.dev',\r\n        componentStateTypes,\r\n        app,\r\n    }, (api) => {\r\n        store.$onAction(({ after, onError, name, args }) => {\r\n            const groupId = runningActionId++;\r\n            api.addTimelineEvent({\r\n                layerId: MUTATIONS_LAYER_ID,\r\n                event: {\r\n                    time: Date.now(),\r\n                    title: 'üõ´ ' + name,\r\n                    subtitle: 'start',\r\n                    data: {\r\n                        store: formatDisplay(store.$id),\r\n                        action: formatDisplay(name),\r\n                        args,\r\n                    },\r\n                    groupId,\r\n                },\r\n            });\r\n            after((result) => {\r\n                activeAction = undefined;\r\n                api.addTimelineEvent({\r\n                    layerId: MUTATIONS_LAYER_ID,\r\n                    event: {\r\n                        time: Date.now(),\r\n                        title: 'üõ¨ ' + name,\r\n                        subtitle: 'end',\r\n                        data: {\r\n                            store: formatDisplay(store.$id),\r\n                            action: formatDisplay(name),\r\n                            args,\r\n                            result,\r\n                        },\r\n                        groupId,\r\n                    },\r\n                });\r\n            });\r\n            onError((error) => {\r\n                activeAction = undefined;\r\n                api.addTimelineEvent({\r\n                    layerId: MUTATIONS_LAYER_ID,\r\n                    event: {\r\n                        time: Date.now(),\r\n                        logType: 'error',\r\n                        title: 'üí• ' + name,\r\n                        subtitle: 'end',\r\n                        data: {\r\n                            store: formatDisplay(store.$id),\r\n                            action: formatDisplay(name),\r\n                            args,\r\n                            error,\r\n                        },\r\n                        groupId,\r\n                    },\r\n                });\r\n            });\r\n        }, true);\r\n        store._customProperties.forEach((name) => {\r\n            watch(() => unref(store[name]), (newValue, oldValue) => {\r\n                api.notifyComponentUpdate();\r\n                api.sendInspectorState(INSPECTOR_ID);\r\n                if (isTimelineActive) {\r\n                    api.addTimelineEvent({\r\n                        layerId: MUTATIONS_LAYER_ID,\r\n                        event: {\r\n                            time: Date.now(),\r\n                            title: 'Change',\r\n                            subtitle: name,\r\n                            data: {\r\n                                newValue,\r\n                                oldValue,\r\n                            },\r\n                            groupId: activeAction,\r\n                        },\r\n                    });\r\n                }\r\n            }, { deep: true });\r\n        });\r\n        store.$subscribe(({ events, type }, state) => {\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorState(INSPECTOR_ID);\r\n            if (!isTimelineActive)\r\n                return;\r\n            // rootStore.state[store.id] = state\r\n            const eventData = {\r\n                time: Date.now(),\r\n                title: formatMutationType(type),\r\n                data: {\r\n                    store: formatDisplay(store.$id),\r\n                    ...formatEventData(events),\r\n                },\r\n                groupId: activeAction,\r\n            };\r\n            // reset for the next mutation\r\n            activeAction = undefined;\r\n            if (type === MutationType.patchFunction) {\r\n                eventData.subtitle = '‚§µÔ∏è';\r\n            }\r\n            else if (type === MutationType.patchObject) {\r\n                eventData.subtitle = 'üß©';\r\n            }\r\n            else if (events && !Array.isArray(events)) {\r\n                eventData.subtitle = events.type;\r\n            }\r\n            if (events) {\r\n                eventData.data['rawEvent(s)'] = {\r\n                    _custom: {\r\n                        display: 'DebuggerEvent',\r\n                        type: 'object',\r\n                        tooltip: 'raw DebuggerEvent[]',\r\n                        value: events,\r\n                    },\r\n                };\r\n            }\r\n            api.addTimelineEvent({\r\n                layerId: MUTATIONS_LAYER_ID,\r\n                event: eventData,\r\n            });\r\n        }, { detached: true, flush: 'sync' });\r\n        const hotUpdate = store._hotUpdate;\r\n        store._hotUpdate = markRaw((newStore) => {\r\n            hotUpdate(newStore);\r\n            api.addTimelineEvent({\r\n                layerId: MUTATIONS_LAYER_ID,\r\n                event: {\r\n                    time: Date.now(),\r\n                    title: 'üî• ' + store.$id,\r\n                    subtitle: 'HMR update',\r\n                    data: {\r\n                        store: formatDisplay(store.$id),\r\n                        info: formatDisplay(`HMR update`),\r\n                    },\r\n                },\r\n            });\r\n            // update the devtools too\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorTree(INSPECTOR_ID);\r\n            api.sendInspectorState(INSPECTOR_ID);\r\n        });\r\n        const { $dispose } = store;\r\n        store.$dispose = () => {\r\n            $dispose();\r\n            api.notifyComponentUpdate();\r\n            api.sendInspectorTree(INSPECTOR_ID);\r\n            api.sendInspectorState(INSPECTOR_ID);\r\n            toastMessage(`Disposed \"${store.$id}\" store üóë`);\r\n        };\r\n        // trigger an update so it can display new registered stores\r\n        api.notifyComponentUpdate();\r\n        api.sendInspectorTree(INSPECTOR_ID);\r\n        api.sendInspectorState(INSPECTOR_ID);\r\n        toastMessage(`\"${store.$id}\" store installed üÜï`);\r\n    });\r\n}\r\nlet runningActionId = 0;\r\nlet activeAction;\r\n/**\r\n * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the context of all actions, allowing us to set `runningAction` on each access and effectively associating any state mutation to the action.\r\n *\r\n * @param store - store to patch\r\n * @param actionNames - list of actionst to patch\r\n */\r\nfunction patchActionForGrouping(store, actionNames) {\r\n    // original actions of the store as they are given by pinia. We are going to override them\r\n    const actions = actionNames.reduce((storeActions, actionName) => {\r\n        // use toRaw to avoid tracking #541\r\n        storeActions[actionName] = toRaw(store)[actionName];\r\n        return storeActions;\r\n    }, {});\r\n    for (const actionName in actions) {\r\n        store[actionName] = function () {\r\n            // setActivePinia(store._p)\r\n            // the running action id is incremented in a before action hook\r\n            const _actionId = runningActionId;\r\n            const trackedStore = new Proxy(store, {\r\n                get(...args) {\r\n                    activeAction = _actionId;\r\n                    return Reflect.get(...args);\r\n                },\r\n                set(...args) {\r\n                    activeAction = _actionId;\r\n                    return Reflect.set(...args);\r\n                },\r\n            });\r\n            return actions[actionName].apply(trackedStore, arguments);\r\n        };\r\n    }\r\n}\r\n/**\r\n * pinia.use(devtoolsPlugin)\r\n */\r\nfunction devtoolsPlugin({ app, store, options }) {\r\n    // HMR module\r\n    if (store.$id.startsWith('__hot:')) {\r\n        return;\r\n    }\r\n    // only wrap actions in option-defined stores as this technique relies on\r\n    // wrapping the context of the action with a proxy\r\n    if (typeof options.state === 'function') {\r\n        patchActionForGrouping(\r\n        // @ts-expect-error: can cast the store...\r\n        store, Object.keys(options.actions));\r\n        const originalHotUpdate = store._hotUpdate;\r\n        // Upgrade the HMR to also update the new actions\r\n        toRaw(store)._hotUpdate = function (newStore) {\r\n            originalHotUpdate.apply(this, arguments);\r\n            patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions));\r\n        };\r\n    }\r\n    addStoreToDevtools(app, \r\n    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?\r\n    store);\r\n}\n\n/**\r\n * Creates a Pinia instance to be used by the application\r\n */\r\nfunction createPinia() {\r\n    const scope = effectScope(true);\r\n    // NOTE: here we could check the window object for a state and directly set it\r\n    // if there is anything like it with Vue 3 SSR\r\n    const state = scope.run(() => ref({}));\r\n    let _p = [];\r\n    // plugins added before calling app.use(pinia)\r\n    const toBeInstalled = [];\r\n    const pinia = markRaw({\r\n        install(app) {\r\n            // this allows calling useStore() outside of a component setup after\r\n            // installing pinia's plugin\r\n            setActivePinia(pinia);\r\n            if (!isVue2) {\r\n                pinia._a = app;\r\n                app.provide(piniaSymbol, pinia);\r\n                app.config.globalProperties.$pinia = pinia;\r\n                /* istanbul ignore else */\r\n                if ((process.env.NODE_ENV !== 'production') && IS_CLIENT) {\r\n                    registerPiniaDevtools(app, pinia);\r\n                }\r\n                toBeInstalled.forEach((plugin) => _p.push(plugin));\r\n            }\r\n        },\r\n        use(plugin) {\r\n            if (!this._a && !isVue2) {\r\n                toBeInstalled.push(plugin);\r\n            }\r\n            else {\r\n                _p.push(plugin);\r\n            }\r\n            return this;\r\n        },\r\n        _p,\r\n        // it's actually undefined here\r\n        // @ts-expect-error\r\n        _a: null,\r\n        _e: scope,\r\n        _s: new Map(),\r\n        state,\r\n    });\r\n    // pinia devtools rely on dev only features so they cannot be forced unless\r\n    // the dev build of Vue is used\r\n    if ((process.env.NODE_ENV !== 'production') && IS_CLIENT) {\r\n        pinia.use(devtoolsPlugin);\r\n    }\r\n    return pinia;\r\n}\n\n/**\r\n * Checks if a function is a `StoreDefinition`.\r\n *\r\n * @param fn - object to test\r\n * @returns true if `fn` is a StoreDefinition\r\n */\r\nconst isUseStore = (fn) => {\r\n    return typeof fn === 'function' && typeof fn.$id === 'string';\r\n};\r\n/**\r\n * Mutates in place `newState` with `oldState` to _hot update_ it. It will\r\n * remove any key not existing in `newState` and recursively merge plain\r\n * objects.\r\n *\r\n * @param newState - new state object to be patched\r\n * @param oldState - old state that should be used to patch newState\r\n * @returns - newState\r\n */\r\nfunction patchObject(newState, oldState) {\r\n    // no need to go through symbols because they cannot be serialized anyway\r\n    for (const key in oldState) {\r\n        const subPatch = oldState[key];\r\n        // skip the whole sub tree\r\n        if (!(key in newState)) {\r\n            continue;\r\n        }\r\n        const targetValue = newState[key];\r\n        if (isPlainObject(targetValue) &&\r\n            isPlainObject(subPatch) &&\r\n            !isRef(subPatch) &&\r\n            !isReactive(subPatch)) {\r\n            newState[key] = patchObject(targetValue, subPatch);\r\n        }\r\n        else {\r\n            // objects are either a bit more complex (e.g. refs) or primitives, so we\r\n            // just set the whole thing\r\n            if (isVue2) {\r\n                set(newState, key, subPatch);\r\n            }\r\n            else {\r\n                newState[key] = subPatch;\r\n            }\r\n        }\r\n    }\r\n    return newState;\r\n}\r\n/**\r\n * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.\r\n *\r\n * @example\r\n * ```js\r\n * const useUser = defineStore(...)\r\n * if (import.meta.hot) {\r\n *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))\r\n * }\r\n * ```\r\n *\r\n * @param initialUseStore - return of the defineStore to hot update\r\n * @param hot - `import.meta.hot`\r\n */\r\nfunction acceptHMRUpdate(initialUseStore, hot) {\r\n    return (newModule) => {\r\n        const pinia = hot.data.pinia || initialUseStore._pinia;\r\n        if (!pinia) {\r\n            // this store is still not used\r\n            return;\r\n        }\r\n        // preserve the pinia instance across loads\r\n        hot.data.pinia = pinia;\r\n        // console.log('got data', newStore)\r\n        for (const exportName in newModule) {\r\n            const useStore = newModule[exportName];\r\n            // console.log('checking for', exportName)\r\n            if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {\r\n                // console.log('Accepting update for', useStore.$id)\r\n                const id = useStore.$id;\r\n                if (id !== initialUseStore.$id) {\r\n                    console.warn(`The id of the store changed from \"${initialUseStore.$id}\" to \"${id}\". Reloading.`);\r\n                    // return import.meta.hot.invalidate()\r\n                    return hot.invalidate();\r\n                }\r\n                const existingStore = pinia._s.get(id);\r\n                if (!existingStore) {\r\n                    console.log(`skipping hmr because store doesn't exist yet`);\r\n                    return;\r\n                }\r\n                useStore(pinia, existingStore);\r\n            }\r\n        }\r\n    };\r\n}\n\nfunction addSubscription(subscriptions, callback, detached) {\r\n    subscriptions.push(callback);\r\n    const removeSubscription = () => {\r\n        const idx = subscriptions.indexOf(callback);\r\n        if (idx > -1) {\r\n            subscriptions.splice(idx, 1);\r\n        }\r\n    };\r\n    if (!detached && getCurrentInstance()) {\r\n        onUnmounted(removeSubscription);\r\n    }\r\n    return removeSubscription;\r\n}\r\nfunction triggerSubscriptions(subscriptions, ...args) {\r\n    subscriptions.forEach((callback) => {\r\n        callback(...args);\r\n    });\r\n}\n\nfunction innerPatch(target, patchToApply) {\r\n    // no need to go through symbols because they cannot be serialized anyway\r\n    for (const key in patchToApply) {\r\n        const subPatch = patchToApply[key];\r\n        const targetValue = target[key];\r\n        if (isPlainObject(targetValue) &&\r\n            isPlainObject(subPatch) &&\r\n            !isRef(subPatch) &&\r\n            !isReactive(subPatch)) {\r\n            target[key] = innerPatch(targetValue, subPatch);\r\n        }\r\n        else {\r\n            // @ts-expect-error: subPatch is a valid value\r\n            target[key] = subPatch;\r\n        }\r\n    }\r\n    return target;\r\n}\r\nconst { assign } = Object;\r\nfunction isComputed(o) {\r\n    if (isVue2) {\r\n        const descriptor = o ? Object.getOwnPropertyDescriptor(o, 'value') : null;\r\n        return (descriptor &&\r\n            descriptor.get &&\r\n            // TODO: make something in @vue/composition-api to be able to check this\r\n            descriptor.get.toString().length > 42);\r\n    }\r\n    return o && o.effect;\r\n}\r\nfunction createOptionsStore(id, options, pinia, hot) {\r\n    const { state, actions, getters } = options;\r\n    const initialState = pinia.state.value[id];\r\n    let store;\r\n    function setup() {\r\n        if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\r\n            if (isVue2) {\r\n                set(pinia.state.value, id, state ? state() : {});\r\n            }\r\n            else {\r\n                pinia.state.value[id] = state ? state() : {};\r\n            }\r\n        }\r\n        // avoid creating a state in pinia.state.value\r\n        const localState = (process.env.NODE_ENV !== 'production') && hot\r\n            ? // use ref() to unwrap refs inside state TODO: check if this is still necessary\r\n                toRefs(ref(state ? state() : {}).value)\r\n            : toRefs(pinia.state.value[id]);\r\n        return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {\r\n            computedGetters[name] = markRaw(computed(() => {\r\n                setActivePinia(pinia);\r\n                // it was created just before\r\n                const store = pinia._s.get(id);\r\n                // allow cross using stores\r\n                if (isVue2 && !store._r)\r\n                    return;\r\n                // @ts-expect-error\r\n                // return getters![name].call(context, context)\r\n                // TODO: avoid reading the getter while assigning with a global variable\r\n                return getters[name].call(store, store);\r\n            }));\r\n            return computedGetters;\r\n        }, {}));\r\n    }\r\n    store = createSetupStore(id, setup, options, pinia, hot);\r\n    store.$reset = function $reset() {\r\n        const newState = state ? state() : {};\r\n        // we use a patch to group all changes into one single subscription\r\n        this.$patch(($state) => {\r\n            assign($state, newState);\r\n        });\r\n    };\r\n    return store;\r\n}\r\nconst noop = () => { };\r\nfunction createSetupStore($id, setup, options = {}, pinia, hot) {\r\n    let scope;\r\n    const buildState = options.state;\r\n    const optionsForPlugin = {\r\n        actions: {},\r\n        ...options,\r\n    };\r\n    /* istanbul ignore if */\r\n    if ((process.env.NODE_ENV !== 'production') && !pinia._e.active) {\r\n        throw new Error('Pinia destroyed');\r\n    }\r\n    // watcher options for $subscribe\r\n    const $subscribeOptions = {\r\n        deep: true,\r\n        // flush: 'post',\r\n    };\r\n    /* istanbul ignore else */\r\n    if ((process.env.NODE_ENV !== 'production') && !isVue2) {\r\n        $subscribeOptions.onTrigger = (event) => {\r\n            /* istanbul ignore else */\r\n            if (isListening) {\r\n                debuggerEvents = event;\r\n                // avoid triggering this while the store is being built and the state is being set in pinia\r\n            }\r\n            else if (isListening == false && !store._hotUpdating) {\r\n                // let patch send all the events together later\r\n                /* istanbul ignore else */\r\n                if (Array.isArray(debuggerEvents)) {\r\n                    debuggerEvents.push(event);\r\n                }\r\n                else {\r\n                    console.error('üçç debuggerEvents should be an array. This is most likely an internal Pinia bug.');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    // internal state\r\n    let isListening; // set to true at the end\r\n    let subscriptions = markRaw([]);\r\n    let actionSubscriptions = markRaw([]);\r\n    let debuggerEvents;\r\n    const initialState = pinia.state.value[$id];\r\n    if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\r\n        if (isVue2) {\r\n            set(pinia.state.value, $id, {});\r\n        }\r\n        else {\r\n            pinia.state.value[$id] = {};\r\n        }\r\n    }\r\n    const hotState = ref({});\r\n    function $patch(partialStateOrMutator) {\r\n        let subscriptionMutation;\r\n        isListening = false;\r\n        // reset the debugger events since patches are sync\r\n        /* istanbul ignore else */\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            debuggerEvents = [];\r\n        }\r\n        if (typeof partialStateOrMutator === 'function') {\r\n            partialStateOrMutator(pinia.state.value[$id]);\r\n            subscriptionMutation = {\r\n                type: MutationType.patchFunction,\r\n                storeId: $id,\r\n                events: debuggerEvents,\r\n            };\r\n        }\r\n        else {\r\n            innerPatch(pinia.state.value[$id], partialStateOrMutator);\r\n            subscriptionMutation = {\r\n                type: MutationType.patchObject,\r\n                payload: partialStateOrMutator,\r\n                storeId: $id,\r\n                events: debuggerEvents,\r\n            };\r\n        }\r\n        isListening = true;\r\n        // because we paused the watcher, we need to manually call the subscriptions\r\n        triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);\r\n    }\r\n    /* istanbul ignore next */\r\n    const $reset = (process.env.NODE_ENV !== 'production')\r\n        ? () => {\r\n            throw new Error(`üçç: Store \"${$id}\" is build using the setup syntax and does not implement $reset().`);\r\n        }\r\n        : noop;\r\n    function $dispose() {\r\n        scope.stop();\r\n        subscriptions = [];\r\n        actionSubscriptions = [];\r\n        pinia._s.delete($id);\r\n    }\r\n    /**\r\n     * Wraps an action to handle subscriptions.\r\n     *\r\n     * @param name - name of the action\r\n     * @param action - action to wrap\r\n     * @returns a wrapped action to handle subscriptions\r\n     */\r\n    function wrapAction(name, action) {\r\n        return function () {\r\n            setActivePinia(pinia);\r\n            const args = Array.from(arguments);\r\n            let afterCallback = noop;\r\n            let onErrorCallback = noop;\r\n            function after(callback) {\r\n                afterCallback = callback;\r\n            }\r\n            function onError(callback) {\r\n                onErrorCallback = callback;\r\n            }\r\n            // @ts-expect-error\r\n            triggerSubscriptions(actionSubscriptions, {\r\n                args,\r\n                name,\r\n                store,\r\n                after,\r\n                onError,\r\n            });\r\n            let ret;\r\n            try {\r\n                ret = action.apply(this && this.$id === $id ? this : store, args);\r\n                // handle sync errors\r\n            }\r\n            catch (error) {\r\n                if (onErrorCallback(error) !== false) {\r\n                    throw error;\r\n                }\r\n            }\r\n            if (ret instanceof Promise) {\r\n                return ret\r\n                    .then((value) => {\r\n                    const newRet = afterCallback(value);\r\n                    // allow the afterCallback to override the return value\r\n                    return newRet === undefined ? value : newRet;\r\n                })\r\n                    .catch((error) => {\r\n                    if (onErrorCallback(error) !== false) {\r\n                        return Promise.reject(error);\r\n                    }\r\n                });\r\n            }\r\n            // allow the afterCallback to override the return value\r\n            const newRet = afterCallback(ret);\r\n            return newRet === undefined ? ret : newRet;\r\n        };\r\n    }\r\n    const _hmrPayload = /*#__PURE__*/ markRaw({\r\n        actions: {},\r\n        getters: {},\r\n        state: [],\r\n        hotState,\r\n    });\r\n    const partialStore = {\r\n        _p: pinia,\r\n        // _s: scope,\r\n        $id,\r\n        $onAction: addSubscription.bind(null, actionSubscriptions),\r\n        $patch,\r\n        $reset,\r\n        $subscribe(callback, options = {}) {\r\n            /* istanbul ignore if */\r\n            if ((process.env.NODE_ENV !== 'production') && typeof options === 'boolean') {\r\n                console.warn(`[üçç]: store.$subscribe() no longer accepts a boolean as the 2nd parameter:\\n` +\r\n                    `Replace \"store.$subscribe(fn, ${String(options)})\" with \"store.$subscribe(fn, { detached: ${String(options)} })\".\\nThis will fail in production.`);\r\n                options = { detached: options };\r\n            }\r\n            const _removeSubscription = addSubscription(subscriptions, callback, \r\n            // @ts-expect-error: until the deprecation is removed\r\n            options.detached);\r\n            const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state, oldState) => {\r\n                if (isListening) {\r\n                    callback({\r\n                        storeId: $id,\r\n                        type: MutationType.direct,\r\n                        events: debuggerEvents,\r\n                    }, state);\r\n                }\r\n            }, assign({}, $subscribeOptions, options)));\r\n            const removeSubscription = () => {\r\n                stopWatcher();\r\n                _removeSubscription();\r\n            };\r\n            return removeSubscription;\r\n        },\r\n        $dispose,\r\n    };\r\n    if (isVue2) {\r\n        // start as non ready\r\n        partialStore._r = false;\r\n    }\r\n    const store = reactive(assign((process.env.NODE_ENV !== 'production') && IS_CLIENT\r\n        ? // devtools custom properties\r\n            {\r\n                _customProperties: markRaw(new Set()),\r\n                _hmrPayload,\r\n            }\r\n        : {}, partialStore\r\n    // must be added later\r\n    // setupStore\r\n    ));\r\n    // store the partial store now so the setup of stores can instantiate each other before they are finished without\r\n    // creating infinite loops.\r\n    pinia._s.set($id, store);\r\n    // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped\r\n    const setupStore = pinia._e.run(() => {\r\n        scope = effectScope();\r\n        return scope.run(() => setup());\r\n    });\r\n    // overwrite existing actions to support $onAction\r\n    for (const key in setupStore) {\r\n        const prop = setupStore[key];\r\n        if ((isRef(prop) && !isComputed(prop)) || isReactive(prop)) {\r\n            // mark it as a piece of state to be serialized\r\n            if ((process.env.NODE_ENV !== 'production') && hot) {\r\n                set(hotState.value, key, toRef(setupStore, key));\r\n                // createOptionStore directly sets the state in pinia.state.value so we\r\n                // can just skip that\r\n            }\r\n            else if (!buildState) {\r\n                // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created\r\n                if (initialState) {\r\n                    if (isRef(prop)) {\r\n                        prop.value = initialState[key];\r\n                    }\r\n                    else {\r\n                        // probably a reactive object, lets recursively assign\r\n                        innerPatch(prop, initialState[key]);\r\n                    }\r\n                }\r\n                // transfer the ref to the pinia state to keep everything in sync\r\n                if (isVue2) {\r\n                    set(pinia.state.value[$id], key, prop);\r\n                }\r\n                else {\r\n                    pinia.state.value[$id][key] = prop;\r\n                }\r\n            }\r\n            /* istanbul ignore else */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                _hmrPayload.state.push(key);\r\n            }\r\n            // action\r\n        }\r\n        else if (typeof prop === 'function') {\r\n            // @ts-expect-error: we are overriding the function we avoid wrapping if\r\n            const actionValue = (process.env.NODE_ENV !== 'production') && hot ? prop : wrapAction(key, prop);\r\n            // this a hot module replacement store because the hotUpdate method needs\r\n            // to do it with the right context\r\n            if (isVue2) {\r\n                set(setupStore, key, actionValue);\r\n            }\r\n            else {\r\n                // @ts-expect-error\r\n                setupStore[key] = actionValue;\r\n            }\r\n            /* istanbul ignore else */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                _hmrPayload.actions[key] = prop;\r\n            }\r\n            // list actions so they can be used in plugins\r\n            // @ts-expect-error\r\n            optionsForPlugin.actions[key] = prop;\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            // add getters for devtools\r\n            if (isComputed(prop)) {\r\n                _hmrPayload.getters[key] = buildState\r\n                    ? // @ts-expect-error\r\n                        options.getters[key]\r\n                    : prop;\r\n                if (IS_CLIENT) {\r\n                    const getters = \r\n                    // @ts-expect-error: it should be on the store\r\n                    setupStore._getters || (setupStore._getters = markRaw([]));\r\n                    getters.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // add the state, getters, and action properties\r\n    if (isVue2) {\r\n        Object.keys(setupStore).forEach((key) => {\r\n            set(store, key, \r\n            // @ts-expect-error: valid key indexing\r\n            setupStore[key]);\r\n        });\r\n    }\r\n    else {\r\n        assign(store, setupStore);\r\n    }\r\n    // use this instead of a computed with setter to be able to create it anywhere\r\n    // without linking the computed lifespan to wherever the store is first\r\n    // created.\r\n    Object.defineProperty(store, '$state', {\r\n        get: () => ((process.env.NODE_ENV !== 'production') && hot ? hotState.value : pinia.state.value[$id]),\r\n        set: (state) => {\r\n            /* istanbul ignore if */\r\n            if ((process.env.NODE_ENV !== 'production') && hot) {\r\n                throw new Error('cannot set hotState');\r\n            }\r\n            $patch(($state) => {\r\n                assign($state, state);\r\n            });\r\n        },\r\n    });\r\n    // add the hotUpdate before plugins to allow them to override it\r\n    /* istanbul ignore else */\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        store._hotUpdate = markRaw((newStore) => {\r\n            store._hotUpdating = true;\r\n            newStore._hmrPayload.state.forEach((stateKey) => {\r\n                if (stateKey in store.$state) {\r\n                    const newStateTarget = newStore.$state[stateKey];\r\n                    const oldStateSource = store.$state[stateKey];\r\n                    if (typeof newStateTarget === 'object' &&\r\n                        isPlainObject(newStateTarget) &&\r\n                        isPlainObject(oldStateSource)) {\r\n                        patchObject(newStateTarget, oldStateSource);\r\n                    }\r\n                    else {\r\n                        // transfer the ref\r\n                        newStore.$state[stateKey] = oldStateSource;\r\n                    }\r\n                }\r\n                // patch direct access properties to allow store.stateProperty to work as\r\n                // store.$state.stateProperty\r\n                set(store, stateKey, toRef(newStore.$state, stateKey));\r\n            });\r\n            // remove deleted state properties\r\n            Object.keys(store.$state).forEach((stateKey) => {\r\n                if (!(stateKey in newStore.$state)) {\r\n                    del(store, stateKey);\r\n                }\r\n            });\r\n            // avoid devtools logging this as a mutation\r\n            isListening = false;\r\n            pinia.state.value[$id] = toRef(newStore._hmrPayload, 'hotState');\r\n            isListening = true;\r\n            for (const actionName in newStore._hmrPayload.actions) {\r\n                const action = newStore[actionName];\r\n                set(store, actionName, wrapAction(actionName, action));\r\n            }\r\n            // TODO: does this work in both setup and option store?\r\n            for (const getterName in newStore._hmrPayload.getters) {\r\n                const getter = newStore._hmrPayload.getters[getterName];\r\n                const getterValue = buildState\r\n                    ? // special handling of options api\r\n                        computed(() => {\r\n                            setActivePinia(pinia);\r\n                            return getter.call(store, store);\r\n                        })\r\n                    : getter;\r\n                set(store, getterName, getterValue);\r\n            }\r\n            // remove deleted getters\r\n            Object.keys(store._hmrPayload.getters).forEach((key) => {\r\n                if (!(key in newStore._hmrPayload.getters)) {\r\n                    del(store, key);\r\n                }\r\n            });\r\n            // remove old actions\r\n            Object.keys(store._hmrPayload.actions).forEach((key) => {\r\n                if (!(key in newStore._hmrPayload.actions)) {\r\n                    del(store, key);\r\n                }\r\n            });\r\n            // update the values used in devtools and to allow deleting new properties later on\r\n            store._hmrPayload = newStore._hmrPayload;\r\n            store._getters = newStore._getters;\r\n            store._hotUpdating = false;\r\n        });\r\n        const nonEnumerable = {\r\n            writable: true,\r\n            configurable: true,\r\n            // avoid warning on devtools trying to display this property\r\n            enumerable: false,\r\n        };\r\n        if (IS_CLIENT) {\r\n            ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach((p) => {\r\n                Object.defineProperty(store, p, {\r\n                    value: store[p],\r\n                    ...nonEnumerable,\r\n                });\r\n            });\r\n        }\r\n    }\r\n    if (isVue2) {\r\n        // mark the store as ready before pluginsn\r\n        store._r = true;\r\n    }\r\n    // apply all plugins\r\n    pinia._p.forEach((extender) => {\r\n        /* istanbul ignore else */\r\n        if ((process.env.NODE_ENV !== 'production') && IS_CLIENT) {\r\n            const extensions = scope.run(() => extender({\r\n                store,\r\n                app: pinia._a,\r\n                pinia,\r\n                // @ts-expect-error\r\n                options: optionsForPlugin,\r\n            }));\r\n            Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));\r\n            assign(store, extensions);\r\n        }\r\n        else {\r\n            assign(store, scope.run(() => extender({\r\n                store,\r\n                app: pinia._a,\r\n                pinia,\r\n                // @ts-expect-error\r\n                options: optionsForPlugin,\r\n            })));\r\n        }\r\n    });\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        store.$state &&\r\n        typeof store.$state === 'object' &&\r\n        typeof store.$state.constructor === 'function' &&\r\n        !store.$state.constructor.toString().includes('[native code]')) {\r\n        console.warn(`[üçç]: The \"state\" must be a plain object. It cannot be\\n\\tstate: () => new MyClass()`);\r\n    }\r\n    // only apply hydrate to option stores with an initial state in pinia\r\n    if (initialState && buildState) {\r\n        (options.hydrate || innerPatch)(store, initialState);\r\n    }\r\n    isListening = true;\r\n    return store;\r\n}\r\nfunction defineStore(\r\n// TODO: add proper types from above\r\nidOrOptions, setup, setupOptions) {\r\n    let id;\r\n    let options;\r\n    const isSetupStore = typeof setup === 'function';\r\n    if (typeof idOrOptions === 'string') {\r\n        id = idOrOptions;\r\n        // the option store setup will contain the actual options in this case\r\n        options = isSetupStore ? setupOptions : setup;\r\n    }\r\n    else {\r\n        options = idOrOptions;\r\n        id = idOrOptions.id;\r\n    }\r\n    function useStore(pinia, hot) {\r\n        const currentInstance = getCurrentInstance();\r\n        pinia =\r\n            // in test mode, ignore the argument provided as we can always retrieve a\r\n            // pinia instance with getActivePinia()\r\n            ((process.env.NODE_ENV === 'test') && activePinia && activePinia._testing ? null : pinia) ||\r\n                (currentInstance && inject(piniaSymbol));\r\n        if (pinia)\r\n            setActivePinia(pinia);\r\n        if ((process.env.NODE_ENV !== 'production') && !activePinia) {\r\n            throw new Error(`[üçç]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\\n\\n` +\r\n                `const pinia = createPinia()\\n` +\r\n                `app.use(pinia)\\n\\n` +\r\n                `This will fail in production.`);\r\n        }\r\n        pinia = activePinia;\r\n        if (!pinia._s.has(id)) {\r\n            // creating the store registers it in `pinia._s`\r\n            if (isSetupStore) {\r\n                createSetupStore(id, setup, options, pinia);\r\n            }\r\n            else {\r\n                createOptionsStore(id, options, pinia);\r\n            }\r\n            /* istanbul ignore else */\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                // @ts-expect-error: not the right inferred type\r\n                useStore._pinia = pinia;\r\n            }\r\n        }\r\n        const store = pinia._s.get(id);\r\n        if ((process.env.NODE_ENV !== 'production') && hot) {\r\n            const hotId = '__hot:' + id;\r\n            const newStore = isSetupStore\r\n                ? createSetupStore(hotId, setup, options, pinia, true)\r\n                : createOptionsStore(hotId, assign({}, options), pinia, true);\r\n            hot._hotUpdate(newStore);\r\n            // cleanup the state properties and the store from the cache\r\n            delete pinia.state.value[hotId];\r\n            pinia._s.delete(hotId);\r\n        }\r\n        // save stores in instances to access them devtools\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            IS_CLIENT &&\r\n            currentInstance &&\r\n            currentInstance.proxy &&\r\n            // avoid adding stores that are just built for hot module replacement\r\n            !hot) {\r\n            const vm = currentInstance.proxy;\r\n            const cache = '_pStores' in vm ? vm._pStores : (vm._pStores = {});\r\n            cache[id] = store;\r\n        }\r\n        // StoreGeneric cannot be casted towards Store\r\n        return store;\r\n    }\r\n    useStore.$id = id;\r\n    return useStore;\r\n}\n\nlet mapStoreSuffix = 'Store';\r\n/**\r\n * Changes the suffix added by `mapStores()`. Can be set to an empty string.\r\n * Defaults to `\"Store\"`. Make sure to extend the MapStoresCustomization\r\n * interface if you need are using TypeScript.\r\n *\r\n * @param suffix - new suffix\r\n */\r\nfunction setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS\r\n) {\r\n    mapStoreSuffix = suffix;\r\n}\r\n/**\r\n * Allows using stores without the composition API (`setup()`) by generating an\r\n * object to be spread in the `computed` field of a component. It accepts a list\r\n * of store definitions.\r\n *\r\n * @example\r\n * ```js\r\n * export default {\r\n *   computed: {\r\n *     // other computed properties\r\n *     ...mapStores(useUserStore, useCartStore)\r\n *   },\r\n *\r\n *   created() {\r\n *     this.userStore // store with id \"user\"\r\n *     this.cartStore // store with id \"cart\"\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * @param stores - list of stores to map to an object\r\n */\r\nfunction mapStores(...stores) {\r\n    if ((process.env.NODE_ENV !== 'production') && Array.isArray(stores[0])) {\r\n        console.warn(`[üçç]: Directly pass all stores to \"mapStores()\" without putting them in an array:\\n` +\r\n            `Replace\\n` +\r\n            `\\tmapStores([useAuthStore, useCartStore])\\n` +\r\n            `with\\n` +\r\n            `\\tmapStores(useAuthStore, useCartStore)\\n` +\r\n            `This will fail in production if not fixed.`);\r\n        stores = stores[0];\r\n    }\r\n    return stores.reduce((reduced, useStore) => {\r\n        // @ts-expect-error: $id is added by defineStore\r\n        reduced[useStore.$id + mapStoreSuffix] = function () {\r\n            return useStore(this.$pinia);\r\n        };\r\n        return reduced;\r\n    }, {});\r\n}\r\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\r\nfunction mapState(useStore, keysOrMapper) {\r\n    return Array.isArray(keysOrMapper)\r\n        ? keysOrMapper.reduce((reduced, key) => {\r\n            reduced[key] = function () {\r\n                return useStore(this.$pinia)[key];\r\n            };\r\n            return reduced;\r\n        }, {})\r\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\r\n            // @ts-expect-error\r\n            reduced[key] = function () {\r\n                const store = useStore(this.$pinia);\r\n                const storeKey = keysOrMapper[key];\r\n                // for some reason TS is unable to infer the type of storeKey to be a\r\n                // function\r\n                return typeof storeKey === 'function'\r\n                    ? storeKey.call(this, store)\r\n                    : store[storeKey];\r\n            };\r\n            return reduced;\r\n        }, {});\r\n}\r\n/**\r\n * Alias for `mapState()`. You should use `mapState()` instead.\r\n * @deprecated use `mapState()` instead.\r\n */\r\nconst mapGetters = mapState;\r\n/**\r\n * Allows directly using actions from your store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `methods` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\r\nfunction mapActions(useStore, keysOrMapper) {\r\n    return Array.isArray(keysOrMapper)\r\n        ? keysOrMapper.reduce((reduced, key) => {\r\n            // @ts-expect-error\r\n            reduced[key] = function (...args) {\r\n                return useStore(this.$pinia)[key](...args);\r\n            };\r\n            return reduced;\r\n        }, {})\r\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\r\n            // @ts-expect-error\r\n            reduced[key] = function (...args) {\r\n                return useStore(this.$pinia)[keysOrMapper[key]](...args);\r\n            };\r\n            return reduced;\r\n        }, {});\r\n}\r\n/**\r\n * Allows using state and getters from one store without using the composition\r\n * API (`setup()`) by generating an object to be spread in the `computed` field\r\n * of a component.\r\n *\r\n * @param useStore - store to map from\r\n * @param keysOrMapper - array or object\r\n */\r\nfunction mapWritableState(useStore, keysOrMapper) {\r\n    return Array.isArray(keysOrMapper)\r\n        ? keysOrMapper.reduce((reduced, key) => {\r\n            // @ts-ignore\r\n            reduced[key] = {\r\n                get() {\r\n                    return useStore(this.$pinia)[key];\r\n                },\r\n                set(value) {\r\n                    // it's easier to type it here as any\r\n                    return (useStore(this.$pinia)[key] = value);\r\n                },\r\n            };\r\n            return reduced;\r\n        }, {})\r\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\r\n            // @ts-ignore\r\n            reduced[key] = {\r\n                get() {\r\n                    return useStore(this.$pinia)[keysOrMapper[key]];\r\n                },\r\n                set(value) {\r\n                    // it's easier to type it here as any\r\n                    return (useStore(this.$pinia)[keysOrMapper[key]] = value);\r\n                },\r\n            };\r\n            return reduced;\r\n        }, {});\r\n}\n\n/**\r\n * Creates an object of references with all the state, getters, and plugin-added\r\n * state properties of the store. Similar to `toRefs()` but specifically\r\n * designed for Pinia stores so methods and non reactive properties are\r\n * completely ignored.\r\n *\r\n * @param store - store to extract the refs from\r\n */\r\nfunction storeToRefs(store) {\r\n    store = toRaw(store);\r\n    const refs = {};\r\n    for (const key in store) {\r\n        const value = store[key];\r\n        if (isRef(value) || isReactive(value)) {\r\n            // @ts-expect-error: the key is state or getter\r\n            refs[key] =\r\n                // ---\r\n                toRef(store, key);\r\n        }\r\n    }\r\n    return refs;\r\n}\n\n/**\r\n * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need\r\n * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:\r\n * https://pinia.esm.dev/ssr/nuxt.html.\r\n *\r\n * @example\r\n * ```js\r\n * import Vue from 'vue'\r\n * import { PiniaVuePlugin, createPinia } from 'pinia'\r\n *\r\n * Vue.use(PiniaVuePlugin)\r\n * const pinia = createPinia()\r\n *\r\n * new Vue({\r\n *   el: '#app',\r\n *   // ...\r\n *   pinia,\r\n * })\r\n * ```\r\n *\r\n * @param _Vue\r\n */\r\nconst PiniaVuePlugin = function (_Vue) {\r\n    // Equivalent of\r\n    // app.config.globalProperties.$pinia = pinia\r\n    _Vue.mixin({\r\n        beforeCreate() {\r\n            const options = this.$options;\r\n            if (options.pinia) {\r\n                const pinia = options.pinia;\r\n                // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/master/src/apis/inject.ts#L30\r\n                /* istanbul ignore else */\r\n                if (!this._provided) {\r\n                    const provideCache = {};\r\n                    Object.defineProperty(this, '_provided', {\r\n                        get: () => provideCache,\r\n                        set: (v) => Object.assign(provideCache, v),\r\n                    });\r\n                }\r\n                this._provided[piniaSymbol] = pinia;\r\n                // propagate the pinia instance in an SSR friendly way\r\n                // avoid adding it to nuxt twice\r\n                /* istanbul ignore else */\r\n                if (!this.$pinia) {\r\n                    this.$pinia = pinia;\r\n                }\r\n                pinia._a = this;\r\n                if (IS_CLIENT) {\r\n                    // this allows calling useStore() outside of a component setup after\r\n                    // installing pinia's plugin\r\n                    setActivePinia(pinia);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        registerPiniaDevtools(pinia._a, pinia);\r\n                    }\r\n                }\r\n            }\r\n            else if (!this.$pinia && options.parent && options.parent.$pinia) {\r\n                this.$pinia = options.parent.$pinia;\r\n            }\r\n        },\r\n        destroyed() {\r\n            delete this._pStores;\r\n        },\r\n    });\r\n};\r\n/**\r\n * @deprecated use `PiniaVuePlugin` instead.\r\n */\r\nconst PiniaPlugin = PiniaVuePlugin;\n\nexport { MutationType, PiniaPlugin, PiniaVuePlugin, acceptHMRUpdate, createPinia, defineStore, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, storeToRefs };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}