{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\n\n// 获取路由信息并解析\n\nexport default {\n  __name: 'NewsPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n\n    // 定义响应式对象来存储新闻内容\n    const news = ref({\n      title: '',\n      content: ''\n    }); // 初始状态为空的新闻对象\n\n    // 获取新闻详细信息的函数\n    const fetchNewsDetails = id => {\n      const mockNewsData = {\n        1: {\n          title: 'News 1',\n          content: 'Content for News 1'\n        },\n        2: {\n          title: 'News 2',\n          content: 'Content for News 2'\n        },\n        3: {\n          title: 'News 3',\n          content: 'Content for News 3'\n        }\n      };\n      return mockNewsData[id] || {\n        title: 'Not Found',\n        content: 'No content available.'\n      };\n    };\n\n    // 组件挂载时获取新闻信息\n    onMounted(() => {\n      const newsId = route.params.id;\n      news.value = fetchNewsDetails(newsId);\n    });\n\n    // 返回按钮功能\n    // const goBack = () => {\n    //   router.push('/') // 返回应用的首页或新闻列表页\n    // }\n\n    const __returned__ = {\n      route,\n      news,\n      fetchNewsDetails,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","route","news","title","content","fetchNewsDetails","id","mockNewsData","newsId","params","value"],"sources":["D:/ForWork/找实习/中信证券code比赛/复赛/front/news-front/src/components/NewsPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"news-page\">\r\n      <h1>{{ news.title }}</h1> <!-- 新闻标题展示 -->\r\n      <p>{{ news.content }}</p> <!-- 新闻内容显示 -->\r\n      <!-- 返回按钮点击后调用goBack方法，返回新闻列表页面 -->\r\n      <button @click=\"goBack\">返回新闻列表</button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted } from 'vue'\r\n  import { useRoute } from 'vue-router'\r\n  \r\n  // 获取路由信息并解析\r\n  const route = useRoute()\r\n  \r\n  // 定义响应式对象来存储新闻内容\r\n  const news = ref({ title: '', content: '' }) // 初始状态为空的新闻对象\r\n  \r\n  // 获取新闻详细信息的函数\r\n  const fetchNewsDetails = (id) => {\r\n    const mockNewsData = {\r\n      1: { title: 'News 1', content: 'Content for News 1' },\r\n      2: { title: 'News 2', content: 'Content for News 2' },\r\n      3: { title: 'News 3', content: 'Content for News 3' }\r\n    }\r\n    return mockNewsData[id] || { title: 'Not Found', content: 'No content available.' }\r\n  }\r\n  \r\n  // 组件挂载时获取新闻信息\r\n  onMounted(() => {\r\n    const newsId = route.params.id\r\n    news.value = fetchNewsDetails(newsId)\r\n  })\r\n  \r\n  // 返回按钮功能\r\n  // const goBack = () => {\r\n  //   router.push('/') // 返回应用的首页或新闻列表页\r\n  // }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .news-page {\r\n    display: absolute;\r\n    margin: auto; /* 页中页居中布局 */\r\n    padding: 20px; /* 添加内边距以提升可读性 */\r\n    align-items: center;\r\n  }\r\n  \r\n  .news-page button {\r\n    margin: auto;\r\n    padding: 2px 4px;\r\n    background-color: #1a7e38;\r\n    color: #fff;\r\n    border: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .news-page button:hover {\r\n    background-color: #0c5bbf;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAUE,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,SAASC,QAAQ,QAAQ,YAAY;;AAErC;;;;;;;;IACA,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;;IAExB;IACA,MAAME,IAAI,GAAGJ,GAAG,CAAC;MAAEK,KAAK,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAC,CAAC,EAAC;;IAE7C;IACA,MAAMC,gBAAgB,GAAIC,EAAE,IAAK;MAC/B,MAAMC,YAAY,GAAG;QACnB,CAAC,EAAE;UAAEJ,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAqB,CAAC;QACrD,CAAC,EAAE;UAAED,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAqB,CAAC;QACrD,CAAC,EAAE;UAAED,KAAK,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAqB;MACtD,CAAC;MACD,OAAOG,YAAY,CAACD,EAAE,CAAC,IAAI;QAAEH,KAAK,EAAE,WAAW;QAAEC,OAAO,EAAE;MAAwB,CAAC;IACrF,CAAC;;IAED;IACAL,SAAS,CAAC,MAAM;MACd,MAAMS,MAAM,GAAGP,KAAK,CAACQ,MAAM,CAACH,EAAE;MAC9BJ,IAAI,CAACQ,KAAK,GAAGL,gBAAgB,CAACG,MAAM,CAAC;IACvC,CAAC,CAAC;;IAEF;IACA;IACA;IACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}