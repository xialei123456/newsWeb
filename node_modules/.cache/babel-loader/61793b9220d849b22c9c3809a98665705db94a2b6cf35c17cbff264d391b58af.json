{"ast":null,"code":"import { ref, onMounted, watch } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useRouter } from 'vue-router';\n// 获取路由信息\n\nimport NewsList from './NewsList.vue';\nconst __default__ = {\n  name: 'LabelNews',\n  components: {\n    NewsList\n  }\n};\nexport default /*#__PURE__*/Object.assign(__default__, {\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n\n    // 定义一个响应式变量并存储当前路由标签\n    let labelTitle = ref('');\n\n    //定义新闻列表，需根据实际需求获取，传入子组件的props或者获取后端数据\n    let labelNews = ref([]);\n\n    // 更新新闻信息的函数\n    const updateLabelNews = labelTitle => {\n      //假设是从后端获取信息，这里使用静态数据\n      labelNews = [{\n        id: 1,\n        title: labelTitle.value + '的标题',\n        description: '这是一个示例描述',\n        source: '来源标记',\n        url: 'https://finance.sina.com.cn/jjxw/2024-08-09/doc-ihchfyg653217.shtml'\n      }];\n      console.log(labelTitle.value, '已获取');\n    };\n\n    // 组件被挂载时，根据路由参数更新标签\n    onMounted(() => {\n      labelTitle.value = route.params.label;\n      updateLabelNews(labelTitle); // 更新新闻列表\n    });\n\n    // 监听路由path变化来更新新闻信息\n\n    const router = useRouter();\n    watch(() => router.currentRoute.value.path, () => {\n      labelTitle.value = route.params.label;\n      updateLabelNews(labelTitle); //更新新闻列表\n    }, {\n      immediate: true,\n      deep: true\n    });\n    const __returned__ = {\n      route,\n      get labelTitle() {\n        return labelTitle;\n      },\n      set labelTitle(v) {\n        labelTitle = v;\n      },\n      get labelNews() {\n        return labelNews;\n      },\n      set labelNews(v) {\n        labelNews = v;\n      },\n      updateLabelNews,\n      router,\n      NewsList,\n      ref,\n      onMounted,\n      watch,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n});","map":{"version":3,"names":["ref","onMounted","watch","useRoute","useRouter","NewsList","__default__","name","components","route","labelTitle","labelNews","updateLabelNews","id","title","value","description","source","url","console","log","params","label","router","currentRoute","path","immediate","deep"],"sources":["D:/ForWork/找实习/中信证券code比赛/复赛/front/news-front/src/components/LabelNews.vue"],"sourcesContent":["<template>\r\n    <div class=\"label-news\">\r\n      <h1>{{ labelTitle }} 标签的热点新闻</h1>\r\n      <p>来自标签的新闻集合</p>\r\n      <!-- 使用TableTitle获取labelNews,并传入子组件的newsList属性中 -->\r\n      <NewsList :newsList=\"labelNews\"/>\r\n    </div>\r\n</template>\r\n  \r\n  <script>\r\n  import NewsList from './NewsList.vue'\r\n  export default {\r\n    name: 'LabelNews',\r\n    components: {\r\n      NewsList\r\n    }\r\n  }\r\n  </script>\r\n  \r\n<script setup>\r\nimport { ref, onMounted, watch } from 'vue'\r\nimport { useRoute } from 'vue-router'\r\nimport { useRouter } from 'vue-router'\r\n  // 获取路由信息\r\n  const route = useRoute()\r\n  \r\n  // 定义一个响应式变量并存储当前路由标签\r\n  let labelTitle = ref('')\r\n  \r\n  //定义新闻列表，需根据实际需求获取，传入子组件的props或者获取后端数据\r\n  let labelNews = ref([])\r\n  \r\n  // 更新新闻信息的函数\r\n  const updateLabelNews = (labelTitle) => {\r\n    //假设是从后端获取信息，这里使用静态数据\r\n    labelNews = [\r\n      {\r\n        id: 1, \r\n        title: labelTitle.value+'的标题',\r\n        description: '这是一个示例描述',\r\n        source: '来源标记',\r\n        url: 'https://finance.sina.com.cn/jjxw/2024-08-09/doc-ihchfyg653217.shtml'\r\n      }\r\n    ]\r\n    console.log(labelTitle.value, '已获取')\r\n  }\r\n  \r\n  // 组件被挂载时，根据路由参数更新标签\r\n  onMounted(() => {\r\n    labelTitle.value = route.params.label\r\n    updateLabelNews(labelTitle) // 更新新闻列表\r\n  })\r\n  \r\n  // 监听路由path变化来更新新闻信息\r\n\r\n  const router = useRouter()\r\n  watch(() => router.currentRoute.value.path, () => {\r\n    labelTitle.value = route.params.label\r\n    updateLabelNews(labelTitle) //更新新闻列表\r\n  }, { immediate: true, deep: true })\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .label-news {\r\n    padding: 20px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAoBA,SAASA,GAAG,EAAEC,SAAS,EAAEC,KAAK,QAAQ,KAAK;AAC3C,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,SAAS,QAAQ,YAAY;AACpC;;AAbA,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,MAAAC,WAAA,GAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAE;IACVH;EACF;AACF,CAAC;;;;;;IAQD,MAAMI,KAAK,GAAGN,QAAQ,CAAC,CAAC;;IAExB;IACA,IAAIO,UAAU,GAAGV,GAAG,CAAC,EAAE,CAAC;;IAExB;IACA,IAAIW,SAAS,GAAGX,GAAG,CAAC,EAAE,CAAC;;IAEvB;IACA,MAAMY,eAAe,GAAIF,UAAU,IAAK;MACtC;MACAC,SAAS,GAAG,CACV;QACEE,EAAE,EAAE,CAAC;QACLC,KAAK,EAAEJ,UAAU,CAACK,KAAK,GAAC,KAAK;QAC7BC,WAAW,EAAE,UAAU;QACvBC,MAAM,EAAE,MAAM;QACdC,GAAG,EAAE;MACP,CAAC,CACF;MACDC,OAAO,CAACC,GAAG,CAACV,UAAU,CAACK,KAAK,EAAE,KAAK,CAAC;IACtC,CAAC;;IAED;IACAd,SAAS,CAAC,MAAM;MACdS,UAAU,CAACK,KAAK,GAAGN,KAAK,CAACY,MAAM,CAACC,KAAK;MACrCV,eAAe,CAACF,UAAU,CAAC,EAAC;IAC9B,CAAC,CAAC;;IAEF;;IAEA,MAAMa,MAAM,GAAGnB,SAAS,CAAC,CAAC;IAC1BF,KAAK,CAAC,MAAMqB,MAAM,CAACC,YAAY,CAACT,KAAK,CAACU,IAAI,EAAE,MAAM;MAChDf,UAAU,CAACK,KAAK,GAAGN,KAAK,CAACY,MAAM,CAACC,KAAK;MACrCV,eAAe,CAACF,UAAU,CAAC,EAAC;IAC9B,CAAC,EAAE;MAAEgB,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}