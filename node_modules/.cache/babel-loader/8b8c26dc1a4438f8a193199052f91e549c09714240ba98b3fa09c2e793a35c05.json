{"ast":null,"code":"// axios 的配置文件，写法相对固定\n\nimport axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus'; // 引入 element-plus 中的消息提示组件 (vue3弃用了原element-ui)\nimport store from '../store';\n// 使用 vuex 实例进行全局 token 及其他信息管理和存储\nimport { getToken } from '@/utils/auth';\n// auth 文件里使用 js-cookie 库定义了获取、管理 token 等方法\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // API 的 base_url\n  timeout: 15000 // 请求超时时间\n});\n\n// request 拦截器\nservice.interceptors.request.use(config => {\n  if (store.getters.token) {\n    // 如果有 token，则在每个请求的 header 中携带 token\n    config.headers['Authorization'] = getToken();\n  }\n  return config;\n}, error => {\n  // 请求错误的处理\n  console.log(error); // 仅用于调试\n  return Promise.reject(error);\n});\n\n// response 拦截器\nservice.interceptors.response.use(response => {\n  // 当响应状态码不是 200 时进行处理\n  const res = response.data;\n  if (res.code !== 200) {\n    // 使用 element-plus 提供的 ElMessage 组件来显示错误信息\n    ElMessage({\n      message: res.message,\n      type: 'error',\n      duration: 3 * 1000\n    });\n\n    // 处理 401 未登录错误\n    if (res.code === 401) {\n      ElMessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n        confirmButtonText: '重新登录',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        store.dispatch('FedLogOut').then(() => {\n          location.reload(); // 为了重新实例化 vue-router 对象，避免 bug\n        });\n      });\n    }\n    return Promise.reject('error');\n  } else {\n    return response.data;\n  }\n}, error => {\n  // 使用 element-plus 提供的 ElMessage 组件来显示错误信息\n  console.log('err' + error); // 仅用于调试\n  ElMessage({\n    message: error.message,\n    type: 'error',\n    duration: 3 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","ElMessageBox","store","getToken","service","create","baseURL","process","env","VUE_APP_BASE_API","timeout","interceptors","request","use","config","getters","token","headers","error","console","log","Promise","reject","response","res","data","code","message","type","duration","confirm","confirmButtonText","cancelButtonText","then","dispatch","location","reload"],"sources":["D:/ForWork/找实习/中信证券code比赛/复赛/front/news-front/src/utils/request.js"],"sourcesContent":["// axios 的配置文件，写法相对固定\r\n\r\nimport axios from 'axios';\r\nimport { ElMessage, ElMessageBox } from 'element-plus'; // 引入 element-plus 中的消息提示组件 (vue3弃用了原element-ui)\r\nimport store from '../store'; \r\n// 使用 vuex 实例进行全局 token 及其他信息管理和存储\r\nimport { getToken } from '@/utils/auth'; \r\n// auth 文件里使用 js-cookie 库定义了获取、管理 token 等方法\r\n\r\n// 创建 axios 实例\r\nconst service = axios.create({\r\n  baseURL: process.env.VUE_APP_BASE_API, // API 的 base_url\r\n  timeout: 15000 // 请求超时时间\r\n});\r\n\r\n// request 拦截器\r\nservice.interceptors.request.use(\r\n  config => {\r\n    if (store.getters.token) {\r\n      // 如果有 token，则在每个请求的 header 中携带 token\r\n      config.headers['Authorization'] = getToken(); \r\n    }\r\n    return config; \r\n  },\r\n  error => {\r\n    // 请求错误的处理\r\n    console.log(error); // 仅用于调试\r\n    return Promise.reject(error); \r\n  }\r\n);\r\n\r\n// response 拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    // 当响应状态码不是 200 时进行处理\r\n    const res = response.data; \r\n    if (res.code !== 200) {\r\n      // 使用 element-plus 提供的 ElMessage 组件来显示错误信息\r\n      ElMessage({\r\n        message: res.message,\r\n        type: 'error',\r\n        duration: 3 * 1000\r\n      });\r\n\r\n      // 处理 401 未登录错误\r\n      if (res.code === 401) {\r\n        ElMessageBox.confirm(\r\n          '你已被登出，可以取消继续留在该页面，或者重新登录',\r\n          '确定登出',\r\n          {\r\n            confirmButtonText: '重新登录',\r\n            cancelButtonText: '取消',\r\n            type: 'warning'\r\n          }\r\n        ).then(() => {\r\n          store.dispatch('FedLogOut').then(() => {\r\n            location.reload(); // 为了重新实例化 vue-router 对象，避免 bug\r\n          });\r\n        });\r\n      }\r\n      return Promise.reject('error'); \r\n    } else {\r\n      return response.data; \r\n    }\r\n  },\r\n  error => {\r\n    // 使用 element-plus 提供的 ElMessage 组件来显示错误信息\r\n    console.log('err' + error); // 仅用于调试\r\n    ElMessage({\r\n      message: error.message,\r\n      type: 'error',\r\n      duration: 3 * 1000\r\n    });\r\n    return Promise.reject(error); \r\n  }\r\n);\r\n\r\nexport default service;\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,YAAY,QAAQ,cAAc,CAAC,CAAC;AACxD,OAAOC,KAAK,MAAM,UAAU;AAC5B;AACA,SAASC,QAAQ,QAAQ,cAAc;AACvC;;AAEA;AACA,MAAMC,OAAO,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB;EAAE;EACvCC,OAAO,EAAE,KAAK,CAAC;AACjB,CAAC,CAAC;;AAEF;AACAN,OAAO,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR,IAAIZ,KAAK,CAACa,OAAO,CAACC,KAAK,EAAE;IACvB;IACAF,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,GAAGd,QAAQ,CAAC,CAAC;EAC9C;EACA,OAAOW,MAAM;AACf,CAAC,EACDI,KAAK,IAAI;EACP;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC;EACpB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,OAAO,CAACO,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC/BU,QAAQ,IAAI;EACV;EACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpB;IACA1B,SAAS,CAAC;MACR2B,OAAO,EAAEH,GAAG,CAACG,OAAO;MACpBC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAChB,CAAC,CAAC;;IAEF;IACA,IAAIL,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;MACpBzB,YAAY,CAAC6B,OAAO,CAClB,0BAA0B,EAC1B,MAAM,EACN;QACEC,iBAAiB,EAAE,MAAM;QACzBC,gBAAgB,EAAE,IAAI;QACtBJ,IAAI,EAAE;MACR,CACF,CAAC,CAACK,IAAI,CAAC,MAAM;QACX/B,KAAK,CAACgC,QAAQ,CAAC,WAAW,CAAC,CAACD,IAAI,CAAC,MAAM;UACrCE,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;IACA,OAAOf,OAAO,CAACC,MAAM,CAAC,OAAO,CAAC;EAChC,CAAC,MAAM;IACL,OAAOC,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC,EACDP,KAAK,IAAI;EACP;EACAC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC;EAC5BlB,SAAS,CAAC;IACR2B,OAAO,EAAET,KAAK,CAACS,OAAO;IACtBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAChB,CAAC,CAAC;EACF,OAAOR,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}